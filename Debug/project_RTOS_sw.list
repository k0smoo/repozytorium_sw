
project_RTOS_sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001024  20000010  08004b30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001034  08004b30  00021034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb5d  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002730  00000000  00000000  0002fb9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000322d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e5d  00000000  00000000  00034098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001161d  00000000  00000000  00055ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce374  00000000  00000000  00067512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135886  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd8  00000000  00000000  001358d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a00 	.word	0x08004a00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004a00 	.word	0x08004a00

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000002c 	.word	0x2000002c
 8000210:	20000080 	.word	0x20000080

08000214 <LCD_SendByte>:
/*!
 * Funkcja LCD_SendByte() wysyła na magistrale 8-bitową daną. Na początku ustawiany
jest pin LCD_E_Pin, następnie ze względu na ograniczenia, bity od D0 do D7 wysyłane są po kolei.
Ostatecznie pin LCD_E_Pin jest zerowany.
 */
void LCD_SendByte (uint8_t data) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin (LCD_E_GPIO_Port, LCD_E_Pin, 1);
 800021e:	2201      	movs	r2, #1
 8000220:	2101      	movs	r1, #1
 8000222:	482b      	ldr	r0, [pc, #172]	; (80002d0 <LCD_SendByte+0xbc>)
 8000224:	f000 ffd2 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D0_GPIO_Port, LCD_D0_Pin, (data & 0b00000001));
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	f003 0301 	and.w	r3, r3, #1
 800022e:	b2db      	uxtb	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	2101      	movs	r1, #1
 8000234:	4827      	ldr	r0, [pc, #156]	; (80002d4 <LCD_SendByte+0xc0>)
 8000236:	f000 ffc9 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D1_GPIO_Port, LCD_D1_Pin, (data & 0b00000010));
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f003 0302 	and.w	r3, r3, #2
 8000240:	b2db      	uxtb	r3, r3
 8000242:	461a      	mov	r2, r3
 8000244:	2102      	movs	r1, #2
 8000246:	4823      	ldr	r0, [pc, #140]	; (80002d4 <LCD_SendByte+0xc0>)
 8000248:	f000 ffc0 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D2_GPIO_Port, LCD_D2_Pin, (data & 0b00000100));
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	f003 0304 	and.w	r3, r3, #4
 8000252:	b2db      	uxtb	r3, r3
 8000254:	461a      	mov	r2, r3
 8000256:	2104      	movs	r1, #4
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <LCD_SendByte+0xc0>)
 800025a:	f000 ffb7 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D3_GPIO_Port, LCD_D3_Pin, (data & 0b00001000));
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	b2db      	uxtb	r3, r3
 8000266:	461a      	mov	r2, r3
 8000268:	2108      	movs	r1, #8
 800026a:	481a      	ldr	r0, [pc, #104]	; (80002d4 <LCD_SendByte+0xc0>)
 800026c:	f000 ffae 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0b00010000));
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 0310 	and.w	r3, r3, #16
 8000276:	b2db      	uxtb	r3, r3
 8000278:	461a      	mov	r2, r3
 800027a:	2110      	movs	r1, #16
 800027c:	4815      	ldr	r0, [pc, #84]	; (80002d4 <LCD_SendByte+0xc0>)
 800027e:	f000 ffa5 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0b00100000));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	2120      	movs	r1, #32
 800028e:	4811      	ldr	r0, [pc, #68]	; (80002d4 <LCD_SendByte+0xc0>)
 8000290:	f000 ff9c 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0b01000000));
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800029a:	b2db      	uxtb	r3, r3
 800029c:	461a      	mov	r2, r3
 800029e:	2140      	movs	r1, #64	; 0x40
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LCD_SendByte+0xc0>)
 80002a2:	f000 ff93 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0b10000000));
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	2180      	movs	r1, #128	; 0x80
 80002b2:	4808      	ldr	r0, [pc, #32]	; (80002d4 <LCD_SendByte+0xc0>)
 80002b4:	f000 ff8a 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_E_GPIO_Port, LCD_E_Pin, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2101      	movs	r1, #1
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <LCD_SendByte+0xbc>)
 80002be:	f000 ff85 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_Delay (60);
 80002c2:	203c      	movs	r0, #60	; 0x3c
 80002c4:	f000 fcd6 	bl	8000c74 <HAL_Delay>
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	48000800 	.word	0x48000800
 80002d4:	48000400 	.word	0x48000400

080002d8 <LCD_WriteCommand>:

/*!
 * Funkcja LCD_WriteCommand() wystawia na pin LCD_RS_Pin zero co informuje wyświetlacz, że od tego momentu przez magistrale będą przesyłane polecenia. Następnie wywoływana jest funkcja LCD_SendByte() przesyłająca bajt do wyświetlacza.
 */
void LCD_WriteCommand (uint8_t cmd) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <LCD_WriteCommand+0x24>)
 80002e8:	f000 ff70 	bl	80011cc <HAL_GPIO_WritePin>
  LCD_SendByte (cmd);
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ff90 	bl	8000214 <LCD_SendByte>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	48000800 	.word	0x48000800

08000300 <LCD_WriteChar>:

/*!
 * Funkcja LCD_WriteChar() wystawia na pin LCD_RS_Pin jedynka co informuje wyświetlacz, że od tego momentu przez magistrale będą przesyłane dane. Następnie wywoływana jest funkcja LCD_SendByte() przesyłająca bajt do wyświetlacza.
 */
void LCD_WriteChar (char data) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	2102      	movs	r1, #2
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <LCD_WriteChar+0x24>)
 8000310:	f000 ff5c 	bl	80011cc <HAL_GPIO_WritePin>
  LCD_SendByte (data);
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff7c 	bl	8000214 <LCD_SendByte>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	48000800 	.word	0x48000800

08000328 <LCD_WriteString>:

/*!
 * Funkcja LDC_WriteString() służy do przesyłania łańcucha znaków na wyświetlacz. W pętli while inkrementowany jest adres zmiennej „text” i wysyłany do funkcji LCD_WriteChar().
 */
void LCD_WriteString (char *text) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  while (*text)
 8000330:	e006      	b.n	8000340 <LCD_WriteString+0x18>
  LCD_WriteChar (*text++);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	1c5a      	adds	r2, r3, #1
 8000336:	607a      	str	r2, [r7, #4]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ffe0 	bl	8000300 <LCD_WriteChar>
  while (*text)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f4      	bne.n	8000332 <LCD_WriteString+0xa>
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}

08000352 <LCD_Clear>:

/*!
 * Funkcja LCD_Clear() służy do wyczyszczenia ekranu z wyświetlanej zawartości
 */
void LCD_Clear () {
 8000352:	b580      	push	{r7, lr}
 8000354:	af00      	add	r7, sp, #0
  LCD_WriteCommand (LCD_CLEAR);
 8000356:	2001      	movs	r0, #1
 8000358:	f7ff ffbe 	bl	80002d8 <LCD_WriteCommand>
  HAL_Delay (5);
 800035c:	2005      	movs	r0, #5
 800035e:	f000 fc89 	bl	8000c74 <HAL_Delay>
  LCD_WriteCommand (LCDC_ENTRY_MODE|LCD_EM_SHIFT_CURSOR|LCD_EM_RIGHT);
 8000362:	2006      	movs	r0, #6
 8000364:	f7ff ffb8 	bl	80002d8 <LCD_WriteCommand>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <LCD_Init>:
/*!
 * Funkcja LCD_init() przeprowadzana inicjalizacje wyświetlacza HD44780. Następnie konfigurowane są tryby pracy wyświetlacza.
Komendywysyłane przy pomocy funkcji LCD_WriteCommand(). W tym przypadku ustawiana zostaje
komunikacja 8-bitowa, wyświetlanie na dwóch liniach i wielkość czcionki na 5x7.
 */
void LCD_Init () {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin (GPIOC,LCD_D0_Pin,0);
 8000370:	2200      	movs	r2, #0
 8000372:	2101      	movs	r1, #1
 8000374:	482d      	ldr	r0, [pc, #180]	; (800042c <LCD_Init+0xc0>)
 8000376:	f000 ff29 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D1_Pin,0);
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	482b      	ldr	r0, [pc, #172]	; (800042c <LCD_Init+0xc0>)
 8000380:	f000 ff24 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D2_Pin,0);
 8000384:	2200      	movs	r2, #0
 8000386:	2104      	movs	r1, #4
 8000388:	4828      	ldr	r0, [pc, #160]	; (800042c <LCD_Init+0xc0>)
 800038a:	f000 ff1f 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D3_Pin,0);
 800038e:	2200      	movs	r2, #0
 8000390:	2108      	movs	r1, #8
 8000392:	4826      	ldr	r0, [pc, #152]	; (800042c <LCD_Init+0xc0>)
 8000394:	f000 ff1a 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D4_Pin,0);
 8000398:	2200      	movs	r2, #0
 800039a:	2110      	movs	r1, #16
 800039c:	4823      	ldr	r0, [pc, #140]	; (800042c <LCD_Init+0xc0>)
 800039e:	f000 ff15 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D5_Pin,0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2120      	movs	r1, #32
 80003a6:	4821      	ldr	r0, [pc, #132]	; (800042c <LCD_Init+0xc0>)
 80003a8:	f000 ff10 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D6_Pin,0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2140      	movs	r1, #64	; 0x40
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <LCD_Init+0xc0>)
 80003b2:	f000 ff0b 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (GPIOC,LCD_D7_Pin,0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	481c      	ldr	r0, [pc, #112]	; (800042c <LCD_Init+0xc0>)
 80003bc:	f000 ff06 	bl	80011cc <HAL_GPIO_WritePin>

  HAL_Delay (15);
 80003c0:	200f      	movs	r0, #15
 80003c2:	f000 fc57 	bl	8000c74 <HAL_Delay>
  HAL_GPIO_WritePin (LCD_E_GPIO_Port, LCD_E_Pin, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2101      	movs	r1, #1
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <LCD_Init+0xc0>)
 80003cc:	f000 fefe 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin (LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2102      	movs	r1, #2
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <LCD_Init+0xc0>)
 80003d6:	f000 fef9 	bl	80011cc <HAL_GPIO_WritePin>
  HAL_Delay (4);
 80003da:	2004      	movs	r0, #4
 80003dc:	f000 fc4a 	bl	8000c74 <HAL_Delay>
  HAL_Delay (100);
 80003e0:	2064      	movs	r0, #100	; 0x64
 80003e2:	f000 fc47 	bl	8000c74 <HAL_Delay>
  LCD_SendByte (0b00110000);
 80003e6:	2030      	movs	r0, #48	; 0x30
 80003e8:	f7ff ff14 	bl	8000214 <LCD_SendByte>
  HAL_Delay (5);
 80003ec:	2005      	movs	r0, #5
 80003ee:	f000 fc41 	bl	8000c74 <HAL_Delay>
  LCD_SendByte (0b00110000);
 80003f2:	2030      	movs	r0, #48	; 0x30
 80003f4:	f7ff ff0e 	bl	8000214 <LCD_SendByte>
  HAL_Delay (100);
 80003f8:	2064      	movs	r0, #100	; 0x64
 80003fa:	f000 fc3b 	bl	8000c74 <HAL_Delay>
  LCD_SendByte (0b00110000);
 80003fe:	2030      	movs	r0, #48	; 0x30
 8000400:	f7ff ff08 	bl	8000214 <LCD_SendByte>
  HAL_Delay (100);
 8000404:	2064      	movs	r0, #100	; 0x64
 8000406:	f000 fc35 	bl	8000c74 <HAL_Delay>

  LCD_WriteCommand (LCD_FUNC|LCD_8_BIT|LCDC_TWO_LINE|LCDC_FONT_5x7);
 800040a:	2038      	movs	r0, #56	; 0x38
 800040c:	f7ff ff64 	bl	80002d8 <LCD_WriteCommand>
  LCD_WriteCommand (LCD_ONOFF|LCD_DISP_ON);
 8000410:	200c      	movs	r0, #12
 8000412:	f7ff ff61 	bl	80002d8 <LCD_WriteCommand>
  LCD_WriteCommand (LCD_CLEAR);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff ff5e 	bl	80002d8 <LCD_WriteCommand>
  HAL_Delay (5);
 800041c:	2005      	movs	r0, #5
 800041e:	f000 fc29 	bl	8000c74 <HAL_Delay>
  LCD_WriteCommand (LCDC_ENTRY_MODE|LCD_EM_SHIFT_CURSOR|LCD_EM_RIGHT);
 8000422:	2006      	movs	r0, #6
 8000424:	f7ff ff58 	bl	80002d8 <LCD_WriteCommand>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	48000800 	.word	0x48000800

08000430 <int2string>:
}

/**
 * Funkcja int2string konwertuje zmienną typu uint16 na tablice char’ów przez algorytm przedstawiany na rysunku
 */
void int2string (uint16_t ParTemp, char* ParStringPtr) {
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	80fb      	strh	r3, [r7, #6]
  int min = (ParTemp / 60) % 60;
 800043c:	88fb      	ldrh	r3, [r7, #6]
 800043e:	4a39      	ldr	r2, [pc, #228]	; (8000524 <int2string+0xf4>)
 8000440:	fba2 2303 	umull	r2, r3, r2, r3
 8000444:	095b      	lsrs	r3, r3, #5
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b36      	ldr	r3, [pc, #216]	; (8000524 <int2string+0xf4>)
 800044a:	fba3 1302 	umull	r1, r3, r3, r2
 800044e:	0959      	lsrs	r1, r3, #5
 8000450:	460b      	mov	r3, r1
 8000452:	011b      	lsls	r3, r3, #4
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	1ad3      	subs	r3, r2, r3
 800045a:	b29b      	uxth	r3, r3
 800045c:	60fb      	str	r3, [r7, #12]
  int s = ParTemp % 60;
 800045e:	88fa      	ldrh	r2, [r7, #6]
 8000460:	4b30      	ldr	r3, [pc, #192]	; (8000524 <int2string+0xf4>)
 8000462:	fba3 1302 	umull	r1, r3, r3, r2
 8000466:	0959      	lsrs	r1, r3, #5
 8000468:	460b      	mov	r3, r1
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	1ad3      	subs	r3, r2, r3
 8000472:	b29b      	uxth	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

  *ParStringPtr++ = (min/10) + '0'; min %= 10;
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	4a2b      	ldr	r2, [pc, #172]	; (8000528 <int2string+0xf8>)
 800047a:	fb82 1203 	smull	r1, r2, r2, r3
 800047e:	1092      	asrs	r2, r2, #2
 8000480:	17db      	asrs	r3, r3, #31
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b2da      	uxtb	r2, r3
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	1c59      	adds	r1, r3, #1
 800048a:	6039      	str	r1, [r7, #0]
 800048c:	3230      	adds	r2, #48	; 0x30
 800048e:	b2d2      	uxtb	r2, r2
 8000490:	701a      	strb	r2, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <int2string+0xf8>)
 8000496:	fb83 1302 	smull	r1, r3, r3, r2
 800049a:	1099      	asrs	r1, r3, #2
 800049c:	17d3      	asrs	r3, r2, #31
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	460b      	mov	r3, r1
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	440b      	add	r3, r1
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	60fb      	str	r3, [r7, #12]
  *ParStringPtr++ = (min/1) + '0';
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	b2da      	uxtb	r2, r3
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	1c59      	adds	r1, r3, #1
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	3230      	adds	r2, #48	; 0x30
 80004b8:	b2d2      	uxtb	r2, r2
 80004ba:	701a      	strb	r2, [r3, #0]
  *ParStringPtr++ = ':';
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	603a      	str	r2, [r7, #0]
 80004c2:	223a      	movs	r2, #58	; 0x3a
 80004c4:	701a      	strb	r2, [r3, #0]
  *ParStringPtr++ = (s/10) + '0'; s %= 10;
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <int2string+0xf8>)
 80004ca:	fb82 1203 	smull	r1, r2, r2, r3
 80004ce:	1092      	asrs	r2, r2, #2
 80004d0:	17db      	asrs	r3, r3, #31
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	1c59      	adds	r1, r3, #1
 80004da:	6039      	str	r1, [r7, #0]
 80004dc:	3230      	adds	r2, #48	; 0x30
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	701a      	strb	r2, [r3, #0]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <int2string+0xf8>)
 80004e6:	fb83 1302 	smull	r1, r3, r3, r2
 80004ea:	1099      	asrs	r1, r3, #2
 80004ec:	17d3      	asrs	r3, r2, #31
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	460b      	mov	r3, r1
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	440b      	add	r3, r1
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	60bb      	str	r3, [r7, #8]
  *ParStringPtr++ = (s/1) + '0';
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	1c59      	adds	r1, r3, #1
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	3230      	adds	r2, #48	; 0x30
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	701a      	strb	r2, [r3, #0]
  *ParStringPtr++ =  ' ';
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	603a      	str	r2, [r7, #0]
 8000512:	2220      	movs	r2, #32
 8000514:	701a      	strb	r2, [r3, #0]
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	88888889 	.word	0x88888889
 8000528:	66666667 	.word	0x66666667

0800052c <main>:

/**
 * Główna funkcja main
 */
int main (void) {
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  HAL_Init ();
 8000532:	f000 fb39 	bl	8000ba8 <HAL_Init>
  SystemClock_Config ();
 8000536:	f000 f86f 	bl	8000618 <SystemClock_Config>
  MX_GPIO_Init ();
 800053a:	f000 f8e9 	bl	8000710 <MX_GPIO_Init>
  MX_TIM6_Init ();
 800053e:	f000 f8b1 	bl	80006a4 <MX_TIM6_Init>
  HAL_TIM_Base_Start (&htim6);
 8000542:	482b      	ldr	r0, [pc, #172]	; (80005f0 <main+0xc4>)
 8000544:	f002 f8ec 	bl	8002720 <HAL_TIM_Base_Start>
  LCD_Init ();
 8000548:	f7ff ff10 	bl	800036c <LCD_Init>

  queue_player_cnt = xQueueCreate(2, 4*sizeof(uint16_t));
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	2002      	movs	r0, #2
 8000552:	f002 fc13 	bl	8002d7c <xQueueGenericCreate>
 8000556:	4603      	mov	r3, r0
 8000558:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <main+0xc8>)
 800055a:	6013      	str	r3, [r2, #0]
  queue_flags = xQueueCreate(2, 4*sizeof(uint8_t));
 800055c:	2200      	movs	r2, #0
 800055e:	2104      	movs	r1, #4
 8000560:	2002      	movs	r0, #2
 8000562:	f002 fc0b 	bl	8002d7c <xQueueGenericCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a23      	ldr	r2, [pc, #140]	; (80005f8 <main+0xcc>)
 800056a:	6013      	str	r3, [r2, #0]
  queue_white_or_black  = xQueueCreate(2, 4*sizeof(uint8_t));
 800056c:	2200      	movs	r2, #0
 800056e:	2104      	movs	r1, #4
 8000570:	2002      	movs	r0, #2
 8000572:	f002 fc03 	bl	8002d7c <xQueueGenericCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a20      	ldr	r2, [pc, #128]	; (80005fc <main+0xd0>)
 800057a:	6013      	str	r3, [r2, #0]

  osThreadDef (Task1, Task1_init, osPriorityNormal, 0, 128);
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0xd4>)
 800057e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate (osThread(Task1), NULL);
 8000590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fa73 	bl	8002a82 <osThreadCreate>
 800059c:	4603      	mov	r3, r0
 800059e:	4a19      	ldr	r2, [pc, #100]	; (8000604 <main+0xd8>)
 80005a0:	6013      	str	r3, [r2, #0]

  osThreadDef (Task2, Task2_init, osPriorityNormal, 0, 128);
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <main+0xdc>)
 80005a4:	f107 0420 	add.w	r4, r7, #32
 80005a8:	461d      	mov	r5, r3
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate (osThread(Task2), NULL);
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fa60 	bl	8002a82 <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xe0>)
 80005c6:	6013      	str	r3, [r2, #0]

  osThreadDef (Button, ButtonTask, osPriorityNormal , 0, 128);
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xe4>)
 80005ca:	1d3c      	adds	r4, r7, #4
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonTaskHandle = osThreadCreate (osThread(Button), NULL);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fa4f 	bl	8002a82 <osThreadCreate>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <main+0xe8>)
 80005e8:	6013      	str	r3, [r2, #0]

  osKernelStart ();
 80005ea:	f002 fa43 	bl	8002a74 <osKernelStart>

  while (1) {}
 80005ee:	e7fe      	b.n	80005ee <main+0xc2>
 80005f0:	20000280 	.word	0x20000280
 80005f4:	200002d8 	.word	0x200002d8
 80005f8:	200002dc 	.word	0x200002dc
 80005fc:	200002e0 	.word	0x200002e0
 8000600:	08004a30 	.word	0x08004a30
 8000604:	200002cc 	.word	0x200002cc
 8000608:	08004a4c 	.word	0x08004a4c
 800060c:	200002d0 	.word	0x200002d0
 8000610:	08004a68 	.word	0x08004a68
 8000614:	200002d4 	.word	0x200002d4

08000618 <SystemClock_Config>:
}

/**
 * Ustawienia zegara systemowego
 */
void SystemClock_Config (void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2228      	movs	r2, #40	; 0x28
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f9e2 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000642:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL13;
 8000652:	f44f 1330 	mov.w	r3, #2883584	; 0x2c0000
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000658:	2301      	movs	r3, #1
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fdcb 	bl	80011fc <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x58>
    Error_Handler();
 800066c:	f000 f9ee 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fe0a 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x82>
    Error_Handler();
 8000696:	f000 f9d9 	bl	8000a4c <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3740      	adds	r7, #64	; 0x40
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_TIM6_Init>:

/**
 * Jakiś timer
 */
static void MX_TIM6_Init (void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_TIM6_Init+0x64>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_TIM6_Init+0x68>)
 80006b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_TIM6_Init+0x64>)
 80006bc:	2231      	movs	r2, #49	; 0x31
 80006be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_TIM6_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_TIM6_Init+0x64>)
 80006c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80006cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_TIM6_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <MX_TIM6_Init+0x64>)
 80006d6:	f001 ffcb 	bl	8002670 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006e0:	f000 f9b4 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_TIM6_Init+0x64>)
 80006f2:	f002 f91b 	bl	800292c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 f9a6 	bl	8000a4c <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000280 	.word	0x20000280
 800070c:	40001000 	.word	0x40001000

08000710 <MX_GPIO_Init>:

/**
 * GPIO Init
 */
static void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a36      	ldr	r2, [pc, #216]	; (8000804 <MX_GPIO_Init+0xf4>)
 800072c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a30      	ldr	r2, [pc, #192]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0xf4>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <MX_GPIO_Init+0xf4>)
 800075c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a24      	ldr	r2, [pc, #144]	; (8000804 <MX_GPIO_Init+0xf4>)
 8000774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000778:	6153      	str	r3, [r2, #20]
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_GPIO_Init+0xf4>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2122      	movs	r1, #34	; 0x22
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 fd1d 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	21ff      	movs	r1, #255	; 0xff
 8000796:	481c      	ldr	r0, [pc, #112]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000798:	f000 fd18 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2103      	movs	r1, #3
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_GPIO_Init+0xfc>)
 80007a2:	f000 fd13 	bl	80011cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin;
 80007a6:	2303      	movs	r3, #3
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_GPIO_Init+0xfc>)
 80007be:	f000 fb63 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80007c2:	2322      	movs	r3, #34	; 0x22
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 fb54 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D4_Pin
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80007e0:	23ff      	movs	r3, #255	; 0xff
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xf8>)
 80007f8:	f000 fb46 	bl	8000e88 <HAL_GPIO_Init>
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	48000800 	.word	0x48000800

08000810 <Task1_init>:

/**
 * Pierwszy task FreeRTOS
 * xd
 */
void Task1_init (void const * argument) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint16_t cnt [2];
  uint16_t cnt_player_1;
  uint16_t cnt_player_2;

  uint8_t button_que [2];
  uint8_t en_player_1 = 1; //queue_white_or_black
 8000818:	2301      	movs	r3, #1
 800081a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t p1_win;      //queue_flags
  uint8_t p2_win;      //queue_flags

  for (;;) {

	xQueueReceive(queue_flags, &flags, portMAX_DELAY);
 800081e:	4b3c      	ldr	r3, [pc, #240]	; (8000910 <Task1_init+0x100>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f107 010c 	add.w	r1, r7, #12
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fc02 	bl	8003034 <xQueueReceive>
	xQueueReceive(queue_white_or_black, &button_que, portMAX_DELAY);
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <Task1_init+0x104>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f107 0110 	add.w	r1, r7, #16
 8000838:	f04f 32ff 	mov.w	r2, #4294967295
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fbf9 	bl	8003034 <xQueueReceive>
	xQueueReceive(queue_player_cnt, &cnt, portMAX_DELAY);
 8000842:	4b35      	ldr	r3, [pc, #212]	; (8000918 <Task1_init+0x108>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f107 0114 	add.w	r1, r7, #20
 800084a:	f04f 32ff 	mov.w	r2, #4294967295
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fbf0 	bl	8003034 <xQueueReceive>

	p1_win = flags[0];
 8000854:	7b3b      	ldrb	r3, [r7, #12]
 8000856:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	p2_win = flags[1];
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	en_player_1 = button_que[0];
 8000860:	7c3b      	ldrb	r3, [r7, #16]
 8000862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	cnt_player_1 = cnt[0];
 8000866:	8abb      	ldrh	r3, [r7, #20]
 8000868:	857b      	strh	r3, [r7, #42]	; 0x2a
	cnt_player_2 = cnt[1];
 800086a:	8afb      	ldrh	r3, [r7, #22]
 800086c:	853b      	strh	r3, [r7, #40]	; 0x28

	osDelay (100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f002 f953 	bl	8002b1a <osDelay>
	if (p1_win == 1) {
 8000874:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000878:	2b01      	cmp	r3, #1
 800087a:	d105      	bne.n	8000888 <Task1_init+0x78>
	  LCD_Clear ();
 800087c:	f7ff fd69 	bl	8000352 <LCD_Clear>
	  LCD_WriteString ("Black has won!");
 8000880:	4826      	ldr	r0, [pc, #152]	; (800091c <Task1_init+0x10c>)
 8000882:	f7ff fd51 	bl	8000328 <LCD_WriteString>
 8000886:	e7ca      	b.n	800081e <Task1_init+0xe>
	}
	else if (p2_win == 1) {
 8000888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <Task1_init+0x8c>
	 LCD_Clear ();
 8000890:	f7ff fd5f 	bl	8000352 <LCD_Clear>
	LCD_WriteString ("White has won!");
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <Task1_init+0x110>)
 8000896:	f7ff fd47 	bl	8000328 <LCD_WriteString>
 800089a:	e7c0      	b.n	800081e <Task1_init+0xe>
	}
	else {
      LCD_Clear ();
 800089c:	f7ff fd59 	bl	8000352 <LCD_Clear>

      if (en_player_1 == 1) {
 80008a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d103      	bne.n	80008b0 <Task1_init+0xa0>
        LCD_WriteString ("X ");
 80008a8:	481e      	ldr	r0, [pc, #120]	; (8000924 <Task1_init+0x114>)
 80008aa:	f7ff fd3d 	bl	8000328 <LCD_WriteString>
 80008ae:	e002      	b.n	80008b6 <Task1_init+0xa6>
      } else {
        LCD_WriteString ("  ");
 80008b0:	481d      	ldr	r0, [pc, #116]	; (8000928 <Task1_init+0x118>)
 80008b2:	f7ff fd39 	bl	8000328 <LCD_WriteString>
      }

	  LCD_WriteString (" Black: ");
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <Task1_init+0x11c>)
 80008b8:	f7ff fd36 	bl	8000328 <LCD_WriteString>
	  int2string (cnt_player_1, cnt_str_player_1);
 80008bc:	f107 0220 	add.w	r2, r7, #32
 80008c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fdb3 	bl	8000430 <int2string>
   	  LCD_WriteString (cnt_str_player_1);
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd2a 	bl	8000328 <LCD_WriteString>

   	  LCD_WriteString ("                        ");
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <Task1_init+0x120>)
 80008d6:	f7ff fd27 	bl	8000328 <LCD_WriteString>

      if (en_player_1 == 0) {
 80008da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d103      	bne.n	80008ea <Task1_init+0xda>
        LCD_WriteString ("X ");
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <Task1_init+0x114>)
 80008e4:	f7ff fd20 	bl	8000328 <LCD_WriteString>
 80008e8:	e002      	b.n	80008f0 <Task1_init+0xe0>
      } else {
        LCD_WriteString ("  ");
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <Task1_init+0x118>)
 80008ec:	f7ff fd1c 	bl	8000328 <LCD_WriteString>
      }

	  LCD_WriteString (" White: ");
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <Task1_init+0x124>)
 80008f2:	f7ff fd19 	bl	8000328 <LCD_WriteString>
	  int2string (cnt_player_2, cnt_str_player_2);
 80008f6:	f107 0218 	add.w	r2, r7, #24
 80008fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fd96 	bl	8000430 <int2string>
	  LCD_WriteString (cnt_str_player_2);
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fd0d 	bl	8000328 <LCD_WriteString>
	xQueueReceive(queue_flags, &flags, portMAX_DELAY);
 800090e:	e786      	b.n	800081e <Task1_init+0xe>
 8000910:	200002dc 	.word	0x200002dc
 8000914:	200002e0 	.word	0x200002e0
 8000918:	200002d8 	.word	0x200002d8
 800091c:	08004a84 	.word	0x08004a84
 8000920:	08004a94 	.word	0x08004a94
 8000924:	08004aa4 	.word	0x08004aa4
 8000928:	08004aa8 	.word	0x08004aa8
 800092c:	08004aac 	.word	0x08004aac
 8000930:	08004ab8 	.word	0x08004ab8
 8000934:	08004ad4 	.word	0x08004ad4

08000938 <Task2_init>:

/**
 * Drugi task FreeRTOS
 * xdxd
 */
void Task2_init (void const * argument) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    uint16_t cnt [2];
	uint16_t cnt_player_1 = 10;
 8000940:	230a      	movs	r3, #10
 8000942:	83fb      	strh	r3, [r7, #30]
    uint16_t cnt_player_2 = 10;
 8000944:	230a      	movs	r3, #10
 8000946:	83bb      	strh	r3, [r7, #28]
    uint8_t button_que [2];
    uint8_t en_player_1;
    uint8_t timer_running;

    uint8_t flags [2];
    uint8_t p1_win = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	76fb      	strb	r3, [r7, #27]
    uint8_t p2_win = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	76bb      	strb	r3, [r7, #26]

  for (;;) {

	/** Read queue white or black **/
	xQueueReceive(queue_white_or_black, &button_que,  portMAX_DELAY);
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <Task2_init+0xb0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f107 0110 	add.w	r1, r7, #16
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fb69 	bl	8003034 <xQueueReceive>
	en_player_1 = button_que[0];
 8000962:	7c3b      	ldrb	r3, [r7, #16]
 8000964:	767b      	strb	r3, [r7, #25]
	timer_running = button_que[1];
 8000966:	7c7b      	ldrb	r3, [r7, #17]
 8000968:	763b      	strb	r3, [r7, #24]

	if (timer_running == 1) {
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d122      	bne.n	80009b6 <Task2_init+0x7e>
      if (en_player_1) {
 8000970:	7e7b      	ldrb	r3, [r7, #25]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d006      	beq.n	8000984 <Task2_init+0x4c>
	    if (cnt_player_1 > 0) {
 8000976:	8bfb      	ldrh	r3, [r7, #30]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d009      	beq.n	8000990 <Task2_init+0x58>
	      cnt_player_1--;
 800097c:	8bfb      	ldrh	r3, [r7, #30]
 800097e:	3b01      	subs	r3, #1
 8000980:	83fb      	strh	r3, [r7, #30]
 8000982:	e005      	b.n	8000990 <Task2_init+0x58>
	    }
	  } else {
	    if (cnt_player_2 > 0) {
 8000984:	8bbb      	ldrh	r3, [r7, #28]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <Task2_init+0x58>
		  cnt_player_2--;
 800098a:	8bbb      	ldrh	r3, [r7, #28]
 800098c:	3b01      	subs	r3, #1
 800098e:	83bb      	strh	r3, [r7, #28]
	    }
      }

      /** 1sec **/
      osDelay (1000);
 8000990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000994:	f002 f8c1 	bl	8002b1a <osDelay>

      if (cnt_player_1 == 0) {
 8000998:	8bfb      	ldrh	r3, [r7, #30]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <Task2_init+0x70>
		timer_running = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	763b      	strb	r3, [r7, #24]
		p2_win = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	76bb      	strb	r3, [r7, #26]
 80009a6:	e006      	b.n	80009b6 <Task2_init+0x7e>
      } else if (cnt_player_2 == 0) {
 80009a8:	8bbb      	ldrh	r3, [r7, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d103      	bne.n	80009b6 <Task2_init+0x7e>
    	timer_running = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	763b      	strb	r3, [r7, #24]
    	p1_win = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	76fb      	strb	r3, [r7, #27]
      }
	}

	/** Write queue flags **/
	flags[0] = p1_win;
 80009b6:	7efb      	ldrb	r3, [r7, #27]
 80009b8:	733b      	strb	r3, [r7, #12]
	flags[1] = p2_win;
 80009ba:	7ebb      	ldrb	r3, [r7, #26]
 80009bc:	737b      	strb	r3, [r7, #13]
	xQueueSend(queue_flags, &flags,( TickType_t ) 0 );
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <Task2_init+0xb4>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	f107 010c 	add.w	r1, r7, #12
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	f002 fa35 	bl	8002e38 <xQueueGenericSend>

	cnt[0] = cnt_player_1;
 80009ce:	8bfb      	ldrh	r3, [r7, #30]
 80009d0:	82bb      	strh	r3, [r7, #20]
	cnt[1] = cnt_player_2;
 80009d2:	8bbb      	ldrh	r3, [r7, #28]
 80009d4:	82fb      	strh	r3, [r7, #22]
	xQueueSend(queue_player_cnt, &cnt,( TickType_t ) 0 );
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <Task2_init+0xb8>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	f107 0114 	add.w	r1, r7, #20
 80009de:	2300      	movs	r3, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	f002 fa29 	bl	8002e38 <xQueueGenericSend>
	xQueueReceive(queue_white_or_black, &button_que,  portMAX_DELAY);
 80009e6:	e7b3      	b.n	8000950 <Task2_init+0x18>
 80009e8:	200002e0 	.word	0x200002e0
 80009ec:	200002dc 	.word	0x200002dc
 80009f0:	200002d8 	.word	0x200002d8

080009f4 <ButtonTask>:
}

/**
 * Trzeci task obsługujący przycisk
 */
void ButtonTask (void* pvParameters) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint8_t en_player_1 = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint8_t timer_running;
  uint8_t button_que [2];
  while (1) {
    if (HAL_GPIO_ReadPin (BUTTON_BLUE_PORT,BUTTON_BLUE_PIN) == 0) {
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <ButtonTask+0x50>)
 8000a06:	f000 fbc9 	bl	800119c <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10b      	bne.n	8000a28 <ButtonTask+0x34>
      en_player_1 = !en_player_1;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	73fb      	strb	r3, [r7, #15]
      timer_running = 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	73bb      	strb	r3, [r7, #14]
      osDelay (200);
 8000a22:	20c8      	movs	r0, #200	; 0xc8
 8000a24:	f002 f879 	bl	8002b1a <osDelay>
    }
    button_que[0] = en_player_1;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	733b      	strb	r3, [r7, #12]
    button_que[1] = timer_running;
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	737b      	strb	r3, [r7, #13]
    xQueueSend(queue_white_or_black, &button_que,( TickType_t ) 0 );
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <ButtonTask+0x54>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	f107 010c 	add.w	r1, r7, #12
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f002 f9fc 	bl	8002e38 <xQueueGenericSend>
    if (HAL_GPIO_ReadPin (BUTTON_BLUE_PORT,BUTTON_BLUE_PIN) == 0) {
 8000a40:	e7de      	b.n	8000a00 <ButtonTask+0xc>
 8000a42:	bf00      	nop
 8000a44:	48000800 	.word	0x48000800
 8000a48:	200002e0 	.word	0x200002e0

08000a4c <Error_Handler>:
//}

/**
 * Error Handler
 */
void Error_Handler (void) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1) {}
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 f9ce 	bl	8000e36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac0:	f043 0310 	orr.w	r3, r3, #16
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f88c 	bl	8000c34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b1c:	f003 fa42 	bl	8003fa4 <xTaskGetSchedulerState>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d001      	beq.n	8000b2a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b26:	f003 fd07 	bl	8004538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490e      	ldr	r1, [pc, #56]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7e:	f7ff ffd7 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f003 ff03 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b86:	f7ff fcd1 	bl	800052c <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b98:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8000b9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ba0:	20001034 	.word	0x20001034

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f931 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff ff48 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f93b 	bl	8000e6e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f911 	bl	8000e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000004 	.word	0x20000004

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	200002e4 	.word	0x200002e4

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200002e4 	.word	0x200002e4

08000c74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	; (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	; (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff47 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff5c 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffb0 	bl	8000ddc <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e160      	b.n	800115a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8152 	beq.w	8001154 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d005      	beq.n	8000ec8 <HAL_GPIO_Init+0x40>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d017      	beq.n	8000f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d123      	bne.n	8000fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	220f      	movs	r2, #15
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691a      	ldr	r2, [r3, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	08da      	lsrs	r2, r3, #3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3208      	adds	r2, #8
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0203 	and.w	r2, r3, #3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 80ac 	beq.w	8001154 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001014:	4a59      	ldr	r2, [pc, #356]	; (800117c <HAL_GPIO_Init+0x2f4>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800103e:	d025      	beq.n	800108c <HAL_GPIO_Init+0x204>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <HAL_GPIO_Init+0x2f8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d01f      	beq.n	8001088 <HAL_GPIO_Init+0x200>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4e      	ldr	r2, [pc, #312]	; (8001184 <HAL_GPIO_Init+0x2fc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d019      	beq.n	8001084 <HAL_GPIO_Init+0x1fc>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x300>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d013      	beq.n	8001080 <HAL_GPIO_Init+0x1f8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x304>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00d      	beq.n	800107c <HAL_GPIO_Init+0x1f4>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a4b      	ldr	r2, [pc, #300]	; (8001190 <HAL_GPIO_Init+0x308>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_GPIO_Init+0x1f0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <HAL_GPIO_Init+0x30c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_GPIO_Init+0x1ec>
 8001070:	2306      	movs	r3, #6
 8001072:	e00c      	b.n	800108e <HAL_GPIO_Init+0x206>
 8001074:	2307      	movs	r3, #7
 8001076:	e00a      	b.n	800108e <HAL_GPIO_Init+0x206>
 8001078:	2305      	movs	r3, #5
 800107a:	e008      	b.n	800108e <HAL_GPIO_Init+0x206>
 800107c:	2304      	movs	r3, #4
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x206>
 8001080:	2303      	movs	r3, #3
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x206>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x206>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x206>
 800108c:	2300      	movs	r3, #0
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	4937      	ldr	r1, [pc, #220]	; (800117c <HAL_GPIO_Init+0x2f4>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_GPIO_Init+0x310>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_GPIO_Init+0x310>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001124:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_GPIO_Init+0x310>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_GPIO_Init+0x310>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800114e:	4a12      	ldr	r2, [pc, #72]	; (8001198 <HAL_GPIO_Init+0x310>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae97 	bne.w	8000e98 <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	48000c00 	.word	0x48000c00
 800118c:	48001000 	.word	0x48001000
 8001190:	48001400 	.word	0x48001400
 8001194:	48001800 	.word	0x48001800
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
 80011d8:	4613      	mov	r3, r2
 80011da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011dc:	787b      	ldrb	r3, [r7, #1]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e8:	e002      	b.n	80011f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001202:	af00      	add	r7, sp, #0
 8001204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800120c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001212:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	f001 b83a 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 816f 	beq.w	8001516 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001238:	4bb5      	ldr	r3, [pc, #724]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001244:	4bb2      	ldr	r3, [pc, #712]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d15c      	bne.n	800130a <HAL_RCC_OscConfig+0x10e>
 8001250:	4baf      	ldr	r3, [pc, #700]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125c:	d155      	bne.n	800130a <HAL_RCC_OscConfig+0x10e>
 800125e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001262:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001272:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	fab3 f383 	clz	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	095b      	lsrs	r3, r3, #5
 800127e:	b2db      	uxtb	r3, r3
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d102      	bne.n	8001290 <HAL_RCC_OscConfig+0x94>
 800128a:	4ba1      	ldr	r3, [pc, #644]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	e015      	b.n	80012bc <HAL_RCC_OscConfig+0xc0>
 8001290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001294:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012b8:	4b95      	ldr	r3, [pc, #596]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80012c4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80012c8:	fa92 f2a2 	rbit	r2, r2
 80012cc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80012d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012d4:	fab2 f282 	clz	r2, r2
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	f002 021f 	and.w	r2, r2, #31
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8111 	beq.w	8001514 <HAL_RCC_OscConfig+0x318>
 80012f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 8108 	bne.w	8001514 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	f000 bfc6 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800130e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131a:	d106      	bne.n	800132a <HAL_RCC_OscConfig+0x12e>
 800131c:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e036      	b.n	8001398 <HAL_RCC_OscConfig+0x19c>
 800132a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800132e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x158>
 800133a:	4b75      	ldr	r3, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a74      	ldr	r2, [pc, #464]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b72      	ldr	r3, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a71      	ldr	r2, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800134c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e021      	b.n	8001398 <HAL_RCC_OscConfig+0x19c>
 8001354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001358:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x184>
 8001366:	4b6a      	ldr	r3, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a69      	ldr	r2, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b67      	ldr	r3, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a66      	ldr	r2, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0x19c>
 8001380:	4b63      	ldr	r3, [pc, #396]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a62      	ldr	r2, [pc, #392]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b60      	ldr	r3, [pc, #384]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a5f      	ldr	r2, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc58 	bl	8000c5c <HAL_GetTick>
 80013ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fc53 	bl	8000c5c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d902      	bls.n	80013c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f000 bf67 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80013dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x1fe>
 80013f4:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x22a>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001416:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800142e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800143a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ab      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b6>
 800145a:	e05c      	b.n	8001516 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fbfe 	bl	8000c5c <HAL_GetTick>
 8001460:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001466:	f7ff fbf9 	bl	8000c5c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d902      	bls.n	800147c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	f000 bf0d 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 800147c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001480:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001490:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d102      	bne.n	80014ae <HAL_RCC_OscConfig+0x2b2>
 80014a8:	4b19      	ldr	r3, [pc, #100]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x2de>
 80014ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014ce:	fa93 f3a3 	rbit	r3, r3
 80014d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_RCC_OscConfig+0x314>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014de:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80014e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80014e6:	fa92 f2a2 	rbit	r2, r2
 80014ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80014ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80014f2:	fab2 f282 	clz	r2, r2
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	f002 021f 	and.w	r2, r2, #31
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ab      	bne.n	8001466 <HAL_RCC_OscConfig+0x26a>
 800150e:	e002      	b.n	8001516 <HAL_RCC_OscConfig+0x31a>
 8001510:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 817f 	beq.w	800182a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800152c:	4ba7      	ldr	r3, [pc, #668]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00c      	beq.n	8001552 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001538:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d173      	bne.n	800162c <HAL_RCC_OscConfig+0x430>
 8001544:	4ba1      	ldr	r3, [pc, #644]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800154c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001550:	d16c      	bne.n	800162c <HAL_RCC_OscConfig+0x430>
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001564:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x386>
 800157c:	4b93      	ldr	r3, [pc, #588]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	e013      	b.n	80015aa <HAL_RCC_OscConfig+0x3ae>
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800159a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800159e:	fa93 f3a3 	rbit	r3, r3
 80015a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2202      	movs	r2, #2
 80015ac:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80015b0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80015b4:	fa92 f2a2 	rbit	r2, r2
 80015b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80015bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015c0:	fab2 f282 	clz	r2, r2
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	f042 0220 	orr.w	r2, r2, #32
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f002 021f 	and.w	r2, r2, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3f6>
 80015dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d002      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f000 be52 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	21f8      	movs	r1, #248	; 0xf8
 8001608:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001610:	fa91 f1a1 	rbit	r1, r1
 8001614:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001618:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800161c:	fab1 f181 	clz	r1, r1
 8001620:	b2c9      	uxtb	r1, r1
 8001622:	408b      	lsls	r3, r1
 8001624:	4969      	ldr	r1, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	e0fe      	b.n	800182a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8088 	beq.w	800174e <HAL_RCC_OscConfig+0x552>
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001650:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	2301      	movs	r3, #1
 8001668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff faf7 	bl	8000c5c <HAL_GetTick>
 800166e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff faf2 	bl	8000c5c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 be06 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800169c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x4be>
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <HAL_RCC_OscConfig+0x4e6>
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2202      	movs	r2, #2
 80016e4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80016e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80016ec:	fa92 f2a2 	rbit	r2, r2
 80016f0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80016f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0af      	beq.n	8001674 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001720:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	21f8      	movs	r1, #248	; 0xf8
 800172a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001732:	fa91 f1a1 	rbit	r1, r1
 8001736:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800173a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800173e:	fab1 f181 	clz	r1, r1
 8001742:	b2c9      	uxtb	r1, r1
 8001744:	408b      	lsls	r3, r1
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e06d      	b.n	800182a <HAL_RCC_OscConfig+0x62e>
 800174e:	2301      	movs	r3, #1
 8001750:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800176e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	2300      	movs	r3, #0
 8001778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fa6f 	bl	8000c5c <HAL_GetTick>
 800177e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fa6a 	bl	8000c5c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d902      	bls.n	800179a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	f000 bd7e 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80017ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5d4>
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <HAL_RCC_OscConfig+0x5d0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e016      	b.n	80017f8 <HAL_RCC_OscConfig+0x5fc>
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017f4:	4bbf      	ldr	r3, [pc, #764]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80017fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001802:	fa92 f2a2 	rbit	r2, r2
 8001806:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800180a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800180e:	fab2 f282 	clz	r2, r2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f002 021f 	and.w	r2, r2, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ac      	bne.n	8001784 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8113 	beq.w	8001a66 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d07c      	beq.n	800194a <HAL_RCC_OscConfig+0x74e>
 8001850:	2301      	movs	r3, #1
 8001852:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001862:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	4ba2      	ldr	r3, [pc, #648]	; (8001af8 <HAL_RCC_OscConfig+0x8fc>)
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	2301      	movs	r3, #1
 8001878:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff f9ef 	bl	8000c5c <HAL_GetTick>
 800187e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff f9ea 	bl	8000c5c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d902      	bls.n	800189a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	f000 bcfe 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 800189a:	2302      	movs	r3, #2
 800189c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018a4:	fa93 f2a3 	rbit	r2, r3
 80018a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018ba:	2202      	movs	r2, #2
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fa93 f2a3 	rbit	r2, r3
 80018f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80018f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 80018fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001906:	2102      	movs	r1, #2
 8001908:	6019      	str	r1, [r3, #0]
 800190a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f1a3 	rbit	r1, r3
 8001918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001920:	6019      	str	r1, [r3, #0]
  return result;
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fab3 f383 	clz	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d09d      	beq.n	8001884 <HAL_RCC_OscConfig+0x688>
 8001948:	e08d      	b.n	8001a66 <HAL_RCC_OscConfig+0x86a>
 800194a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800196c:	601a      	str	r2, [r3, #0]
  return result;
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001976:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x8fc>)
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2300      	movs	r3, #0
 800198a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff f966 	bl	8000c5c <HAL_GetTick>
 8001990:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f961 	bl	8000c5c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d902      	bls.n	80019ac <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f000 bc75 	b.w	8002296 <HAL_RCC_OscConfig+0x109a>
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019fc:	2202      	movs	r2, #2
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a16:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 8001a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a24:	2102      	movs	r1, #2
 8001a26:	6019      	str	r1, [r3, #0]
 8001a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fa93 f1a3 	rbit	r1, r3
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a3e:	6019      	str	r1, [r3, #0]
  return result;
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d197      	bne.n	8001996 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 81a5 	beq.w	8001dc6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <HAL_RCC_OscConfig+0x8f8>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <HAL_RCC_OscConfig+0x900>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d121      	bne.n	8001b0c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x900>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x900>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8c2 	bl	8000c5c <HAL_GetTick>
 8001ad8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e010      	b.n	8001b00 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff f8bd 	bl	8000c5c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d908      	bls.n	8001b00 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e3d1      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	10908120 	.word	0x10908120
 8001afc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_OscConfig+0xb3c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0e8      	beq.n	8001ade <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x92e>
 8001b1c:	4b87      	ldr	r3, [pc, #540]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a86      	ldr	r2, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e035      	b.n	8001b96 <HAL_RCC_OscConfig+0x99a>
 8001b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x958>
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b4c:	f023 0304 	bic.w	r3, r3, #4
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	e020      	b.n	8001b96 <HAL_RCC_OscConfig+0x99a>
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d10c      	bne.n	8001b7e <HAL_RCC_OscConfig+0x982>
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a74      	ldr	r2, [pc, #464]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6213      	str	r3, [r2, #32]
 8001b7c:	e00b      	b.n	8001b96 <HAL_RCC_OscConfig+0x99a>
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b6c      	ldr	r3, [pc, #432]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a6b      	ldr	r2, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8081 	beq.w	8001caa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f858 	bl	8000c5c <HAL_GetTick>
 8001bac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb0:	e00b      	b.n	8001bca <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff f853 	bl	8000c5c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e365      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	fa93 f2a3 	rbit	r2, r3
 8001c08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c16:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f043 0302 	orr.w	r3, r3, #2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_OscConfig+0xa3a>
 8001c30:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	e013      	b.n	8001c5e <HAL_RCC_OscConfig+0xa62>
 8001c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	fa93 f2a3 	rbit	r2, r3
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c62:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c66:	2102      	movs	r1, #2
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c6e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	fa92 f1a2 	rbit	r1, r2
 8001c78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c7c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c80:	6011      	str	r1, [r2, #0]
  return result;
 8001c82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c86:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	fab2 f282 	clz	r2, r2
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f002 021f 	and.w	r2, r2, #31
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d084      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x9b6>
 8001ca8:	e083      	b.n	8001db2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7fe ffd7 	bl	8000c5c <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ffd2 	bl	8000c5c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e2e4      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 8001ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cdc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d1c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	095b      	lsrs	r3, r3, #5
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d106      	bne.n	8001d40 <HAL_RCC_OscConfig+0xb44>
 8001d32:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_RCC_OscConfig+0xb40>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	e017      	b.n	8001d68 <HAL_RCC_OscConfig+0xb6c>
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d48:	2202      	movs	r2, #2
 8001d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	4bb3      	ldr	r3, [pc, #716]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d70:	2102      	movs	r1, #2
 8001d72:	6011      	str	r1, [r2, #0]
 8001d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	fa92 f1a2 	rbit	r1, r2
 8001d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d86:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d8a:	6011      	str	r1, [r2, #0]
  return result;
 8001d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d90:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	fab2 f282 	clz	r2, r2
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f002 021f 	and.w	r2, r2, #31
 8001da6:	2101      	movs	r1, #1
 8001da8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d180      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a9d      	ldr	r2, [pc, #628]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 825e 	beq.w	8002294 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b96      	ldr	r3, [pc, #600]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f000 821f 	beq.w	8002224 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 8170 	bne.w	80020d8 <HAL_RCC_OscConfig+0xedc>
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e1c:	601a      	str	r2, [r3, #0]
  return result;
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e26:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff0d 	bl	8000c5c <HAL_GetTick>
 8001e42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	e009      	b.n	8001e5c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ff08 	bl	8000c5c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e21c      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 8001e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e60:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e80:	601a      	str	r2, [r3, #0]
  return result;
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	fab3 f383 	clz	r3, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCC_OscConfig+0xcaa>
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e027      	b.n	8001ef6 <HAL_RCC_OscConfig+0xcfa>
 8001ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eaa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fa93 f2a3 	rbit	r2, r3
 8001ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001efa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001efe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f02:	6011      	str	r1, [r2, #0]
 8001f04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f08:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	fa92 f1a2 	rbit	r1, r2
 8001f12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f16:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f1a:	6011      	str	r1, [r2, #0]
  return result;
 8001f1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f20:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	fab2 f282 	clz	r2, r2
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f042 0220 	orr.w	r2, r2, #32
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f002 021f 	and.w	r2, r2, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d182      	bne.n	8001e48 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a19      	ldr	r1, [r3, #32]
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	492d      	ldr	r1, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fa8:	601a      	str	r2, [r3, #0]
  return result;
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fb2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe fe47 	bl	8000c5c <HAL_GetTick>
 8001fce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fe42 	bl	8000c5c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e156      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002008:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0xe3c>
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <HAL_RCC_OscConfig+0xe38>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e02a      	b.n	8002088 <HAL_RCC_OscConfig+0xe8c>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002066:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002070:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b86      	ldr	r3, [pc, #536]	; (80022a0 <HAL_RCC_OscConfig+0x10a4>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800208c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002090:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002094:	6011      	str	r1, [r2, #0]
 8002096:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fa92 f1a2 	rbit	r1, r2
 80020a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020ac:	6011      	str	r1, [r2, #0]
  return result;
 80020ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020b2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f43f af7f 	beq.w	8001fd4 <HAL_RCC_OscConfig+0xdd8>
 80020d6:	e0dd      	b.n	8002294 <HAL_RCC_OscConfig+0x1098>
 80020d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80020fc:	601a      	str	r2, [r3, #0]
  return result;
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002106:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002112:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	461a      	mov	r2, r3
 800211a:	2300      	movs	r3, #0
 800211c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fd9d 	bl	8000c5c <HAL_GetTick>
 8002122:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	e009      	b.n	800213c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe fd98 	bl	8000c5c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0ac      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
 800213c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002140:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002144:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800215c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002160:	601a      	str	r2, [r3, #0]
  return result;
 8002162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002166:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800216a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	fab3 f383 	clz	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d102      	bne.n	8002186 <HAL_RCC_OscConfig+0xf8a>
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_OscConfig+0x10a4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	e027      	b.n	80021d6 <HAL_RCC_OscConfig+0xfda>
 8002186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800218e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002192:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	fa93 f2a3 	rbit	r2, r3
 80021c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021cc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x10a4>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021da:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021e2:	6011      	str	r1, [r2, #0]
 80021e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	fa92 f1a2 	rbit	r1, r2
 80021f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021f6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80021fa:	6011      	str	r1, [r2, #0]
  return result;
 80021fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002200:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d182      	bne.n	8002128 <HAL_RCC_OscConfig+0xf2c>
 8002222:	e037      	b.n	8002294 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e02e      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_OscConfig+0x10a4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x10a4>)
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002248:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800224c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	d117      	bne.n	8002290 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002260:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002264:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002274:	429a      	cmp	r2, r3
 8002276:	d10b      	bne.n	8002290 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09e      	sub	sp, #120	; 0x78
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e162      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b90      	ldr	r3, [pc, #576]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b8d      	ldr	r3, [pc, #564]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	498b      	ldr	r1, [pc, #556]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b89      	ldr	r3, [pc, #548]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e14a      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	497f      	ldr	r1, [pc, #508]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80dc 	beq.w	80024d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d13c      	bne.n	800239a <HAL_RCC_ClockConfig+0xf6>
 8002320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002324:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002328:	fa93 f3a3 	rbit	r3, r3
 800232c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800232e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_RCC_ClockConfig+0xa6>
 8002344:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	e00f      	b.n	800236a <HAL_RCC_ClockConfig+0xc6>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	667b      	str	r3, [r7, #100]	; 0x64
 8002358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002366:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800236e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002372:	fa92 f2a2 	rbit	r2, r2
 8002376:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800237a:	fab2 f282 	clz	r2, r2
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f042 0220 	orr.w	r2, r2, #32
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f002 021f 	and.w	r2, r2, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d17b      	bne.n	800248e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e0f3      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d13c      	bne.n	800241c <HAL_RCC_ClockConfig+0x178>
 80023a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_ClockConfig+0x128>
 80023c6:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e00f      	b.n	80023ec <HAL_RCC_ClockConfig+0x148>
 80023cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	647b      	str	r3, [r7, #68]	; 0x44
 80023da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
 80023e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e8:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80023f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fc:	fab2 f282 	clz	r2, r2
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f042 0220 	orr.w	r2, r2, #32
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	f002 021f 	and.w	r2, r2, #31
 800240c:	2101      	movs	r1, #1
 800240e:	fa01 f202 	lsl.w	r2, r1, r2
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d13a      	bne.n	800248e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b2      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
 800241c:	2302      	movs	r3, #2
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	095b      	lsrs	r3, r3, #5
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d102      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
 800243e:	4b31      	ldr	r3, [pc, #196]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e00d      	b.n	8002460 <HAL_RCC_ClockConfig+0x1bc>
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	fa93 f3a3 	rbit	r3, r3
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2202      	movs	r2, #2
 8002462:	61ba      	str	r2, [r7, #24]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	fa92 f2a2 	rbit	r2, r2
 800246a:	617a      	str	r2, [r7, #20]
  return result;
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e079      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fbdc 	bl	8000c5c <HAL_GetTick>
 80024a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fbd8 	bl	8000c5c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e061      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_RCC_ClockConfig+0x260>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d214      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0207 	bic.w	r2, r3, #7
 80024e6:	4906      	ldr	r1, [pc, #24]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e040      	b.n	8002582 <HAL_RCC_ClockConfig+0x2de>
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_ClockConfig+0x2e8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	491a      	ldr	r1, [pc, #104]	; (800258c <HAL_RCC_ClockConfig+0x2e8>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_RCC_ClockConfig+0x2e8>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4912      	ldr	r1, [pc, #72]	; (800258c <HAL_RCC_ClockConfig+0x2e8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002546:	f000 f829 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_RCC_ClockConfig+0x2e8>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002554:	22f0      	movs	r2, #240	; 0xf0
 8002556:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	fa92 f2a2 	rbit	r2, r2
 800255e:	60fa      	str	r2, [r7, #12]
  return result;
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	fab2 f282 	clz	r2, r2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	40d3      	lsrs	r3, r2
 800256a:	4a09      	ldr	r2, [pc, #36]	; (8002590 <HAL_RCC_ClockConfig+0x2ec>)
 800256c:	5cd3      	ldrb	r3, [r2, r3]
 800256e:	fa21 f303 	lsr.w	r3, r1, r3
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_RCC_ClockConfig+0x2f0>)
 8002574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <HAL_RCC_ClockConfig+0x2f4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fb2a 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3778      	adds	r7, #120	; 0x78
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	08004ae8 	.word	0x08004ae8
 8002594:	20000000 	.word	0x20000000
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b08b      	sub	sp, #44	; 0x2c
 80025a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	2300      	movs	r3, #0
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x30>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ca:	e03f      	b.n	800264c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ce:	623b      	str	r3, [r7, #32]
      break;
 80025d0:	e03f      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	607a      	str	r2, [r7, #4]
  return result;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	fab2 f282 	clz	r2, r2
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	40d3      	lsrs	r3, r2
 80025f0:	4a1d      	ldr	r2, [pc, #116]	; (8002668 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	220f      	movs	r2, #15
 8002600:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	60fa      	str	r2, [r7, #12]
  return result;
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	fab2 f282 	clz	r2, r2
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	40d3      	lsrs	r3, r2
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	fbb2 f2f3 	udiv	r2, r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	e007      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fbb2 f2f3 	udiv	r2, r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	623b      	str	r3, [r7, #32]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetSysClockFreq+0xc8>)
 800264e:	623b      	str	r3, [r7, #32]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6a3b      	ldr	r3, [r7, #32]
}
 8002654:	4618      	mov	r0, r3
 8002656:	372c      	adds	r7, #44	; 0x2c
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	007a1200 	.word	0x007a1200
 8002668:	08004af8 	.word	0x08004af8
 800266c:	08004b08 	.word	0x08004b08

08002670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e049      	b.n	8002716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fa06 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f000 f89e 	bl	80027f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e047      	b.n	80027c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a23      	ldr	r2, [pc, #140]	; (80027d4 <HAL_TIM_Base_Start+0xb4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01d      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d018      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_TIM_Base_Start+0xb8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <HAL_TIM_Base_Start+0xbc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_TIM_Base_Start+0xc0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d009      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <HAL_TIM_Base_Start+0xc4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_Base_Start+0x66>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_TIM_Base_Start+0xc8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d115      	bne.n	80027b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <HAL_TIM_Base_Start+0xcc>)
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d015      	beq.n	80027c4 <HAL_TIM_Base_Start+0xa4>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d011      	beq.n	80027c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e008      	b.n	80027c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40015000 	.word	0x40015000
 80027ec:	00010007 	.word	0x00010007

080027f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a42      	ldr	r2, [pc, #264]	; (800290c <TIM_Base_SetConfig+0x11c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280e:	d00f      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00b      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3e      	ldr	r2, [pc, #248]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3d      	ldr	r2, [pc, #244]	; (8002918 <TIM_Base_SetConfig+0x128>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3c      	ldr	r2, [pc, #240]	; (800291c <TIM_Base_SetConfig+0x12c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a31      	ldr	r2, [pc, #196]	; (800290c <TIM_Base_SetConfig+0x11c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01f      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d01b      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <TIM_Base_SetConfig+0x120>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d017      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <TIM_Base_SetConfig+0x124>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2c      	ldr	r2, [pc, #176]	; (8002918 <TIM_Base_SetConfig+0x128>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00f      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <TIM_Base_SetConfig+0x130>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00b      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <TIM_Base_SetConfig+0x134>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <TIM_Base_SetConfig+0x138>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d003      	beq.n	800288a <TIM_Base_SetConfig+0x9a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_Base_SetConfig+0x12c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d108      	bne.n	800289c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <TIM_Base_SetConfig+0x11c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <TIM_Base_SetConfig+0x100>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a13      	ldr	r2, [pc, #76]	; (8002918 <TIM_Base_SetConfig+0x128>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00f      	beq.n	80028f0 <TIM_Base_SetConfig+0x100>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <TIM_Base_SetConfig+0x130>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x100>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <TIM_Base_SetConfig+0x134>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x100>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a11      	ldr	r2, [pc, #68]	; (8002928 <TIM_Base_SetConfig+0x138>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x100>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <TIM_Base_SetConfig+0x12c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	615a      	str	r2, [r3, #20]
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800
 8002918:	40013400 	.word	0x40013400
 800291c:	40015000 	.word	0x40015000
 8002920:	40014000 	.word	0x40014000
 8002924:	40014400 	.word	0x40014400
 8002928:	40014800 	.word	0x40014800

0800292c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002940:	2302      	movs	r3, #2
 8002942:	e06d      	b.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a30      	ldr	r2, [pc, #192]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a2f      	ldr	r2, [pc, #188]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2d      	ldr	r2, [pc, #180]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1e      	ldr	r2, [pc, #120]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d01d      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d018      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d013      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d00e      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d009      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d004      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10c      	bne.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40013400 	.word	0x40013400
 8002a34:	40015000 	.word	0x40015000
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40014000 	.word	0x40014000

08002a44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a56:	2b84      	cmp	r3, #132	; 0x84
 8002a58:	d005      	beq.n	8002a66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	3303      	adds	r3, #3
 8002a64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a78:	f000 fe8a 	bl	8003790 <vTaskStartScheduler>
  
  return osOK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a84:	b089      	sub	sp, #36	; 0x24
 8002a86:	af04      	add	r7, sp, #16
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <osThreadCreate+0x54>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685c      	ldr	r4, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681d      	ldr	r5, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691e      	ldr	r6, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ffc8 	bl	8002a44 <makeFreeRtosPriority>
 8002ab4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	9100      	str	r1, [sp, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4632      	mov	r2, r6
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4620      	mov	r0, r4
 8002acc:	f000 fca2 	bl	8003414 <xTaskCreateStatic>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e01c      	b.n	8002b10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685c      	ldr	r4, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ae2:	b29e      	uxth	r6, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ffaa 	bl	8002a44 <makeFreeRtosPriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4632      	mov	r2, r6
 8002afe:	4629      	mov	r1, r5
 8002b00:	4620      	mov	r0, r4
 8002b02:	f000 fce3 	bl	80034cc <xTaskCreate>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d001      	beq.n	8002b10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b10:	68fb      	ldr	r3, [r7, #12]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <osDelay+0x16>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	e000      	b.n	8002b32 <osDelay+0x18>
 8002b30:	2301      	movs	r3, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fdf8 	bl	8003728 <vTaskDelay>
  
  return osOK;
 8002b38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f103 0208 	add.w	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f103 0208 	add.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 0208 	add.w	r2, r3, #8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d103      	bne.n	8002c04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e00c      	b.n	8002c1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3308      	adds	r3, #8
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e002      	b.n	8002c12 <vListInsert+0x2e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d2f6      	bcs.n	8002c0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	601a      	str	r2, [r3, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6852      	ldr	r2, [r2, #4]
 8002c76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d103      	bne.n	8002c8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	1e5a      	subs	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cd6:	f001 fb9d 	bl	8004414 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	68f9      	ldr	r1, [r7, #12]
 8002ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	441a      	add	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	3b01      	subs	r3, #1
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	441a      	add	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	22ff      	movs	r2, #255	; 0xff
 8002d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d114      	bne.n	8002d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01a      	beq.n	8002d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ff71 	bl	8003c20 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <xQueueGenericReset+0xcc>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e009      	b.n	8002d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	3310      	adds	r3, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fef1 	bl	8002b42 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3324      	adds	r3, #36	; 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feec 	bl	8002b42 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f001 fb83 	bl	8004474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	; 0x28
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	613b      	str	r3, [r7, #16]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e004      	b.n	8002dbc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3348      	adds	r3, #72	; 0x48
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fc09 	bl	80045d8 <pvPortMalloc>
 8002dc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00f      	beq.n	8002dee <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	3348      	adds	r3, #72	; 0x48
 8002dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f805 	bl	8002df8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002dee:	69bb      	ldr	r3, [r7, #24]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e002      	b.n	8002e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e26:	2101      	movs	r1, #1
 8002e28:	69b8      	ldr	r0, [r7, #24]
 8002e2a:	f7ff ff3f 	bl	8002cac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08e      	sub	sp, #56	; 0x38
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e46:	2300      	movs	r3, #0
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10a      	bne.n	8002e6a <xQueueGenericSend+0x32>
	__asm volatile
 8002e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e66:	bf00      	nop
 8002e68:	e7fe      	b.n	8002e68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <xQueueGenericSend+0x40>
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <xQueueGenericSend+0x44>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <xQueueGenericSend+0x46>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <xQueueGenericSend+0x60>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d103      	bne.n	8002ea6 <xQueueGenericSend+0x6e>
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <xQueueGenericSend+0x72>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <xQueueGenericSend+0x74>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	623b      	str	r3, [r7, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ec6:	f001 f86d 	bl	8003fa4 <xTaskGetSchedulerState>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <xQueueGenericSend+0x9e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <xQueueGenericSend+0xa2>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <xQueueGenericSend+0xa4>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee4:	f383 8811 	msr	BASEPRI, r3
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	61fb      	str	r3, [r7, #28]
}
 8002ef2:	bf00      	nop
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ef6:	f001 fa8d 	bl	8004414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <xQueueGenericSend+0xd4>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d129      	bne.n	8002f60 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f12:	f000 f96f 	bl	80031f4 <prvCopyDataToQueue>
 8002f16:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f22:	3324      	adds	r3, #36	; 0x24
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fe7b 	bl	8003c20 <xTaskRemoveFromEventList>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <xQueueGenericSend+0x1f8>)
 8002f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f3bf 8f4f 	dsb	sy
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	e00a      	b.n	8002f58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d007      	beq.n	8002f58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <xQueueGenericSend+0x1f8>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f58:	f001 fa8c 	bl	8004474 <vPortExitCritical>
				return pdPASS;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e063      	b.n	8003028 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d103      	bne.n	8002f6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f66:	f001 fa85 	bl	8004474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e05c      	b.n	8003028 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 feb3 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f82:	f001 fa77 	bl	8004474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f86:	f000 fc63 	bl	8003850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f8a:	f001 fa43 	bl	8004414 <vPortEnterCritical>
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d103      	bne.n	8002fa4 <xQueueGenericSend+0x16c>
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d103      	bne.n	8002fba <xQueueGenericSend+0x182>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fba:	f001 fa5b 	bl	8004474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fbe:	1d3a      	adds	r2, r7, #4
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fea2 	bl	8003d10 <xTaskCheckForTimeOut>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d124      	bne.n	800301c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd4:	f000 fa06 	bl	80033e4 <prvIsQueueFull>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	3310      	adds	r3, #16
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fdf6 	bl	8003bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fee:	f000 f991 	bl	8003314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ff2:	f000 fc3b 	bl	800386c <xTaskResumeAll>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f af7c 	bne.w	8002ef6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <xQueueGenericSend+0x1f8>)
 8003000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	e772      	b.n	8002ef6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003012:	f000 f97f 	bl	8003314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003016:	f000 fc29 	bl	800386c <xTaskResumeAll>
 800301a:	e76c      	b.n	8002ef6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800301c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800301e:	f000 f979 	bl	8003314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003022:	f000 fc23 	bl	800386c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003026:	2300      	movs	r3, #0
		}
	}
}
 8003028:	4618      	mov	r0, r3
 800302a:	3738      	adds	r7, #56	; 0x38
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	e000ed04 	.word	0xe000ed04

08003034 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003040:	2300      	movs	r3, #0
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <xQueueReceive+0x30>
	__asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	623b      	str	r3, [r7, #32]
}
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <xQueueReceive+0x3e>
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <xQueueReceive+0x42>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <xQueueReceive+0x44>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <xQueueReceive+0x5e>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61fb      	str	r3, [r7, #28]
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003092:	f000 ff87 	bl	8003fa4 <xTaskGetSchedulerState>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <xQueueReceive+0x6e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <xQueueReceive+0x72>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <xQueueReceive+0x74>
 80030a6:	2300      	movs	r3, #0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <xQueueReceive+0x8e>
	__asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	61bb      	str	r3, [r7, #24]
}
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80030c2:	f001 f9a7 	bl	8004414 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01f      	beq.n	8003112 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d6:	f000 f8f7 	bl	80032c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	1e5a      	subs	r2, r3, #1
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00f      	beq.n	800310a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	3310      	adds	r3, #16
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fd96 	bl	8003c20 <xTaskRemoveFromEventList>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030fa:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <xQueueReceive+0x1bc>)
 80030fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800310a:	f001 f9b3 	bl	8004474 <vPortExitCritical>
				return pdPASS;
 800310e:	2301      	movs	r3, #1
 8003110:	e069      	b.n	80031e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003118:	f001 f9ac 	bl	8004474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800311c:	2300      	movs	r3, #0
 800311e:	e062      	b.n	80031e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003126:	f107 0310 	add.w	r3, r7, #16
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fdda 	bl	8003ce4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003134:	f001 f99e 	bl	8004474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003138:	f000 fb8a 	bl	8003850 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800313c:	f001 f96a 	bl	8004414 <vPortEnterCritical>
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003146:	b25b      	sxtb	r3, r3
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d103      	bne.n	8003156 <xQueueReceive+0x122>
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315c:	b25b      	sxtb	r3, r3
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d103      	bne.n	800316c <xQueueReceive+0x138>
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800316c:	f001 f982 	bl	8004474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003170:	1d3a      	adds	r2, r7, #4
 8003172:	f107 0310 	add.w	r3, r7, #16
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fdc9 	bl	8003d10 <xTaskCheckForTimeOut>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d123      	bne.n	80031cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003186:	f000 f917 	bl	80033b8 <prvIsQueueEmpty>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d017      	beq.n	80031c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	3324      	adds	r3, #36	; 0x24
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd1d 	bl	8003bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800319e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a0:	f000 f8b8 	bl	8003314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031a4:	f000 fb62 	bl	800386c <xTaskResumeAll>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d189      	bne.n	80030c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <xQueueReceive+0x1bc>)
 80031b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	e780      	b.n	80030c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031c2:	f000 f8a7 	bl	8003314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c6:	f000 fb51 	bl	800386c <xTaskResumeAll>
 80031ca:	e77a      	b.n	80030c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ce:	f000 f8a1 	bl	8003314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d2:	f000 fb4b 	bl	800386c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d8:	f000 f8ee 	bl	80033b8 <prvIsQueueEmpty>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f43f af6f 	beq.w	80030c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3730      	adds	r7, #48	; 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d14d      	bne.n	80032b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fede 	bl	8003fe0 <xTaskPriorityDisinherit>
 8003224:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
 800322c:	e043      	b.n	80032b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d119      	bne.n	8003268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6898      	ldr	r0, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	461a      	mov	r2, r3
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	f001 fbc8 	bl	80049d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	441a      	add	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d32b      	bcc.n	80032b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	e026      	b.n	80032b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68d8      	ldr	r0, [r3, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	461a      	mov	r2, r3
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	f001 fbae 	bl	80049d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	425b      	negs	r3, r3
 8003282:	441a      	add	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d207      	bcs.n	80032a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	425b      	negs	r3, r3
 800329e:	441a      	add	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d105      	bne.n	80032b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032be:	697b      	ldr	r3, [r7, #20]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d018      	beq.n	800330c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	441a      	add	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d303      	bcc.n	80032fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68d9      	ldr	r1, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	461a      	mov	r2, r3
 8003306:	6838      	ldr	r0, [r7, #0]
 8003308:	f001 fb64 	bl	80049d4 <memcpy>
	}
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800331c:	f001 f87a 	bl	8004414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003328:	e011      	b.n	800334e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3324      	adds	r3, #36	; 0x24
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fc72 	bl	8003c20 <xTaskRemoveFromEventList>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003342:	f000 fd47 	bl	8003dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	3b01      	subs	r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800334e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	dce9      	bgt.n	800332a <prvUnlockQueue+0x16>
 8003356:	e000      	b.n	800335a <prvUnlockQueue+0x46>
					break;
 8003358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	22ff      	movs	r2, #255	; 0xff
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003362:	f001 f887 	bl	8004474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003366:	f001 f855 	bl	8004414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003372:	e011      	b.n	8003398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3310      	adds	r3, #16
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fc4d 	bl	8003c20 <xTaskRemoveFromEventList>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800338c:	f000 fd22 	bl	8003dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	3b01      	subs	r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dce9      	bgt.n	8003374 <prvUnlockQueue+0x60>
 80033a0:	e000      	b.n	80033a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	22ff      	movs	r2, #255	; 0xff
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033ac:	f001 f862 	bl	8004474 <vPortExitCritical>
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033c0:	f001 f828 	bl	8004414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e001      	b.n	80033d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033d6:	f001 f84d 	bl	8004474 <vPortExitCritical>

	return xReturn;
 80033da:	68fb      	ldr	r3, [r7, #12]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033ec:	f001 f812 	bl	8004414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d102      	bne.n	8003402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	e001      	b.n	8003406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003406:	f001 f835 	bl	8004474 <vPortExitCritical>

	return xReturn;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08e      	sub	sp, #56	; 0x38
 8003418:	af04      	add	r7, sp, #16
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	623b      	str	r3, [r7, #32]
}
 800343a:	bf00      	nop
 800343c:	e7fe      	b.n	800343c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <xTaskCreateStatic+0x46>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	61fb      	str	r3, [r7, #28]
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800345a:	2354      	movs	r3, #84	; 0x54
 800345c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2b54      	cmp	r3, #84	; 0x54
 8003462:	d00a      	beq.n	800347a <xTaskCreateStatic+0x66>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	61bb      	str	r3, [r7, #24]
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01e      	beq.n	80034be <xTaskCreateStatic+0xaa>
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01b      	beq.n	80034be <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800348e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003498:	2300      	movs	r3, #0
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f850 	bl	8003556 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034b8:	f000 f8cc 	bl	8003654 <prvAddNewTaskToReadyList>
 80034bc:	e001      	b.n	80034c2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034c2:	697b      	ldr	r3, [r7, #20]
	}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3728      	adds	r7, #40	; 0x28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08c      	sub	sp, #48	; 0x30
 80034d0:	af04      	add	r7, sp, #16
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 f879 	bl	80045d8 <pvPortMalloc>
 80034e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00e      	beq.n	800350c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80034ee:	2054      	movs	r0, #84	; 0x54
 80034f0:	f001 f872 	bl	80045d8 <pvPortMalloc>
 80034f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
 8003502:	e005      	b.n	8003510 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003504:	6978      	ldr	r0, [r7, #20]
 8003506:	f001 f92b 	bl	8004760 <vPortFree>
 800350a:	e001      	b.n	8003510 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d017      	beq.n	8003546 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	2300      	movs	r3, #0
 8003522:	9303      	str	r3, [sp, #12]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f80e 	bl	8003556 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800353a:	69f8      	ldr	r0, [r7, #28]
 800353c:	f000 f88a 	bl	8003654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003540:	2301      	movs	r3, #1
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e002      	b.n	800354c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800354c:	69bb      	ldr	r3, [r7, #24]
	}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800356e:	3b01      	subs	r3, #1
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f023 0307 	bic.w	r3, r3, #7
 800357c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <prvInitialiseNewTask+0x48>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	617b      	str	r3, [r7, #20]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e012      	b.n	80035ca <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4413      	add	r3, r2
 80035aa:	7819      	ldrb	r1, [r3, #0]
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	3334      	adds	r3, #52	; 0x34
 80035b4:	460a      	mov	r2, r1
 80035b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b0f      	cmp	r3, #15
 80035ce:	d9e9      	bls.n	80035a4 <prvInitialiseNewTask+0x4e>
 80035d0:	e000      	b.n	80035d4 <prvInitialiseNewTask+0x7e>
		{
			break;
 80035d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	2b06      	cmp	r3, #6
 80035e0:	d901      	bls.n	80035e6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035e2:	2306      	movs	r3, #6
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2200      	movs	r2, #0
 80035f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff fac0 	bl	8002b82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	3318      	adds	r3, #24
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fabb 	bl	8002b82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003610:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	f1c3 0207 	rsb	r2, r3, #7
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	69b8      	ldr	r0, [r7, #24]
 8003636:	f000 fdbf 	bl	80041b8 <pxPortInitialiseStack>
 800363a:	4602      	mov	r2, r0
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800365c:	f000 feda 	bl	8004414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a29      	ldr	r2, [pc, #164]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 8003668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800366a:	4b29      	ldr	r3, [pc, #164]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003672:	4a27      	ldr	r2, [pc, #156]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <prvAddNewTaskToReadyList+0xb8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003680:	f000 fbcc 	bl	8003e1c <prvInitialiseTaskLists>
 8003684:	e00d      	b.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <prvAddNewTaskToReadyList+0xc0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	429a      	cmp	r2, r3
 800369a:	d802      	bhi.n	80036a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <prvAddNewTaskToReadyList+0xc4>)
 80036aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2201      	movs	r2, #1
 80036b2:	409a      	lsls	r2, r3
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <prvAddNewTaskToReadyList+0xc8>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4a15      	ldr	r2, [pc, #84]	; (8003720 <prvAddNewTaskToReadyList+0xcc>)
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7ff fa61 	bl	8002b9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036da:	f000 fecb 	bl	8004474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <prvAddNewTaskToReadyList+0xc0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <prvAddNewTaskToReadyList+0xbc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d207      	bcs.n	8003704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <prvAddNewTaskToReadyList+0xd0>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200003e8 	.word	0x200003e8
 8003710:	200002e8 	.word	0x200002e8
 8003714:	200003f4 	.word	0x200003f4
 8003718:	20000404 	.word	0x20000404
 800371c:	200003f0 	.word	0x200003f0
 8003720:	200002ec 	.word	0x200002ec
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d017      	beq.n	800376a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <vTaskDelay+0x60>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <vTaskDelay+0x30>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	60bb      	str	r3, [r7, #8]
}
 8003754:	bf00      	nop
 8003756:	e7fe      	b.n	8003756 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003758:	f000 f87a 	bl	8003850 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fcc4 	bl	80040ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003764:	f000 f882 	bl	800386c <xTaskResumeAll>
 8003768:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d107      	bne.n	8003780 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <vTaskDelay+0x64>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	20000410 	.word	0x20000410
 800378c:	e000ed04 	.word	0xe000ed04

08003790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800379e:	463a      	mov	r2, r7
 80037a0:	1d39      	adds	r1, r7, #4
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fd1a 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	9202      	str	r2, [sp, #8]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	2300      	movs	r3, #0
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	460a      	mov	r2, r1
 80037be:	491e      	ldr	r1, [pc, #120]	; (8003838 <vTaskStartScheduler+0xa8>)
 80037c0:	481e      	ldr	r0, [pc, #120]	; (800383c <vTaskStartScheduler+0xac>)
 80037c2:	f7ff fe27 	bl	8003414 <xTaskCreateStatic>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <vTaskStartScheduler+0xb0>)
 80037ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037cc:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <vTaskStartScheduler+0xb0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e001      	b.n	80037de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d116      	bne.n	8003812 <vTaskStartScheduler+0x82>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	613b      	str	r3, [r7, #16]
}
 80037f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <vTaskStartScheduler+0xb4>)
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295
 80037fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <vTaskStartScheduler+0xb8>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003806:	4b11      	ldr	r3, [pc, #68]	; (800384c <vTaskStartScheduler+0xbc>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800380c:	f000 fd60 	bl	80042d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003810:	e00e      	b.n	8003830 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d10a      	bne.n	8003830 <vTaskStartScheduler+0xa0>
	__asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60fb      	str	r3, [r7, #12]
}
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vTaskStartScheduler+0x9e>
}
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	08004ae0 	.word	0x08004ae0
 800383c:	08003ded 	.word	0x08003ded
 8003840:	2000040c 	.word	0x2000040c
 8003844:	20000408 	.word	0x20000408
 8003848:	200003f4 	.word	0x200003f4
 800384c:	200003ec 	.word	0x200003ec

08003850 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <vTaskSuspendAll+0x18>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	4a03      	ldr	r2, [pc, #12]	; (8003868 <vTaskSuspendAll+0x18>)
 800385c:	6013      	str	r3, [r2, #0]
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	20000410 	.word	0x20000410

0800386c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800387a:	4b41      	ldr	r3, [pc, #260]	; (8003980 <xTaskResumeAll+0x114>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <xTaskResumeAll+0x2c>
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	603b      	str	r3, [r7, #0]
}
 8003894:	bf00      	nop
 8003896:	e7fe      	b.n	8003896 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003898:	f000 fdbc 	bl	8004414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <xTaskResumeAll+0x114>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4a37      	ldr	r2, [pc, #220]	; (8003980 <xTaskResumeAll+0x114>)
 80038a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <xTaskResumeAll+0x114>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d161      	bne.n	8003972 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038ae:	4b35      	ldr	r3, [pc, #212]	; (8003984 <xTaskResumeAll+0x118>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d05d      	beq.n	8003972 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038b6:	e02e      	b.n	8003916 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80038b8:	4b33      	ldr	r3, [pc, #204]	; (8003988 <xTaskResumeAll+0x11c>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff f9c6 	bl	8002c56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f9c1 	bl	8002c56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2201      	movs	r2, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <xTaskResumeAll+0x120>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	4a2a      	ldr	r2, [pc, #168]	; (800398c <xTaskResumeAll+0x120>)
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4a27      	ldr	r2, [pc, #156]	; (8003990 <xTaskResumeAll+0x124>)
 80038f4:	441a      	add	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f7ff f94d 	bl	8002b9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <xTaskResumeAll+0x128>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003910:	4b21      	ldr	r3, [pc, #132]	; (8003998 <xTaskResumeAll+0x12c>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <xTaskResumeAll+0x11c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1cc      	bne.n	80038b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003924:	f000 fb18 	bl	8003f58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003928:	4b1c      	ldr	r3, [pc, #112]	; (800399c <xTaskResumeAll+0x130>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003934:	f000 f836 	bl	80039a4 <xTaskIncrementTick>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <xTaskResumeAll+0x12c>)
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f1      	bne.n	8003934 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <xTaskResumeAll+0x130>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xTaskResumeAll+0x12c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <xTaskResumeAll+0x134>)
 8003964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	f3bf 8f4f 	dsb	sy
 800396e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003972:	f000 fd7f 	bl	8004474 <vPortExitCritical>

	return xAlreadyYielded;
 8003976:	68bb      	ldr	r3, [r7, #8]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20000410 	.word	0x20000410
 8003984:	200003e8 	.word	0x200003e8
 8003988:	200003a8 	.word	0x200003a8
 800398c:	200003f0 	.word	0x200003f0
 8003990:	200002ec 	.word	0x200002ec
 8003994:	200002e8 	.word	0x200002e8
 8003998:	200003fc 	.word	0x200003fc
 800399c:	200003f8 	.word	0x200003f8
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <xTaskIncrementTick+0x150>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 808d 	bne.w	8003ad2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039b8:	4b4f      	ldr	r3, [pc, #316]	; (8003af8 <xTaskIncrementTick+0x154>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039c0:	4a4d      	ldr	r2, [pc, #308]	; (8003af8 <xTaskIncrementTick+0x154>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d120      	bne.n	8003a0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <xTaskIncrementTick+0x158>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <xTaskIncrementTick+0x48>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	603b      	str	r3, [r7, #0]
}
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <xTaskIncrementTick+0x46>
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <xTaskIncrementTick+0x158>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <xTaskIncrementTick+0x15c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a41      	ldr	r2, [pc, #260]	; (8003afc <xTaskIncrementTick+0x158>)
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4a41      	ldr	r2, [pc, #260]	; (8003b00 <xTaskIncrementTick+0x15c>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <xTaskIncrementTick+0x160>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	4a3f      	ldr	r2, [pc, #252]	; (8003b04 <xTaskIncrementTick+0x160>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	f000 faa5 	bl	8003f58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a0e:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <xTaskIncrementTick+0x164>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d34d      	bcc.n	8003ab4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a18:	4b38      	ldr	r3, [pc, #224]	; (8003afc <xTaskIncrementTick+0x158>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <xTaskIncrementTick+0x82>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xTaskIncrementTick+0x84>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a2c:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <xTaskIncrementTick+0x164>)
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	601a      	str	r2, [r3, #0]
					break;
 8003a34:	e03e      	b.n	8003ab4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <xTaskIncrementTick+0x158>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d203      	bcs.n	8003a56 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a4e:	4a2e      	ldr	r2, [pc, #184]	; (8003b08 <xTaskIncrementTick+0x164>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6013      	str	r3, [r2, #0]
						break;
 8003a54:	e02e      	b.n	8003ab4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f8fb 	bl	8002c56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff f8f2 	bl	8002c56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	2201      	movs	r2, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <xTaskIncrementTick+0x168>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <xTaskIncrementTick+0x168>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <xTaskIncrementTick+0x16c>)
 8003a92:	441a      	add	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f7ff f87e 	bl	8002b9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <xTaskIncrementTick+0x170>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d3b4      	bcc.n	8003a18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab2:	e7b1      	b.n	8003a18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <xTaskIncrementTick+0x170>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4915      	ldr	r1, [pc, #84]	; (8003b10 <xTaskIncrementTick+0x16c>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d907      	bls.n	8003adc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e004      	b.n	8003adc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <xTaskIncrementTick+0x174>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <xTaskIncrementTick+0x174>)
 8003ada:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <xTaskIncrementTick+0x178>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ae8:	697b      	ldr	r3, [r7, #20]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000410 	.word	0x20000410
 8003af8:	200003ec 	.word	0x200003ec
 8003afc:	200003a0 	.word	0x200003a0
 8003b00:	200003a4 	.word	0x200003a4
 8003b04:	20000400 	.word	0x20000400
 8003b08:	20000408 	.word	0x20000408
 8003b0c:	200003f0 	.word	0x200003f0
 8003b10:	200002ec 	.word	0x200002ec
 8003b14:	200002e8 	.word	0x200002e8
 8003b18:	200003f8 	.word	0x200003f8
 8003b1c:	200003fc 	.word	0x200003fc

08003b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b26:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <vTaskSwitchContext+0xa4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <vTaskSwitchContext+0xa8>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b34:	e03f      	b.n	8003bb6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <vTaskSwitchContext+0xa8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <vTaskSwitchContext+0xac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	fab3 f383 	clz	r3, r3
 8003b48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	f1c3 031f 	rsb	r3, r3, #31
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	491f      	ldr	r1, [pc, #124]	; (8003bd0 <vTaskSwitchContext+0xb0>)
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4613      	mov	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	607b      	str	r3, [r7, #4]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <vTaskSwitchContext+0x5a>
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <vTaskSwitchContext+0xb0>)
 8003b88:	4413      	add	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d104      	bne.n	8003bac <vTaskSwitchContext+0x8c>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <vTaskSwitchContext+0xb4>)
 8003bb4:	6013      	str	r3, [r2, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000410 	.word	0x20000410
 8003bc8:	200003fc 	.word	0x200003fc
 8003bcc:	200003f0 	.word	0x200003f0
 8003bd0:	200002ec 	.word	0x200002ec
 8003bd4:	200002e8 	.word	0x200002e8

08003bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60fb      	str	r3, [r7, #12]
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <vTaskPlaceOnEventList+0x44>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3318      	adds	r3, #24
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe ffec 	bl	8002be4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	6838      	ldr	r0, [r7, #0]
 8003c10:	f000 fa6c 	bl	80040ec <prvAddCurrentTaskToDelayedList>
}
 8003c14:	bf00      	nop
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	200002e8 	.word	0x200002e8

08003c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10a      	bne.n	8003c4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	60fb      	str	r3, [r7, #12]
}
 8003c48:	bf00      	nop
 8003c4a:	e7fe      	b.n	8003c4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff f800 	bl	8002c56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <xTaskRemoveFromEventList+0xac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11c      	bne.n	8003c98 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3304      	adds	r3, #4
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fff7 	bl	8002c56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <xTaskRemoveFromEventList+0xb0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <xTaskRemoveFromEventList+0xb0>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <xTaskRemoveFromEventList+0xb4>)
 8003c88:	441a      	add	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7fe ff83 	bl	8002b9c <vListInsertEnd>
 8003c96:	e005      	b.n	8003ca4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	480e      	ldr	r0, [pc, #56]	; (8003cd8 <xTaskRemoveFromEventList+0xb8>)
 8003ca0:	f7fe ff7c 	bl	8002b9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <xTaskRemoveFromEventList+0xbc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d905      	bls.n	8003cbe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <xTaskRemoveFromEventList+0xc0>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e001      	b.n	8003cc2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003cc2:	697b      	ldr	r3, [r7, #20]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000410 	.word	0x20000410
 8003cd0:	200003f0 	.word	0x200003f0
 8003cd4:	200002ec 	.word	0x200002ec
 8003cd8:	200003a8 	.word	0x200003a8
 8003cdc:	200002e8 	.word	0x200002e8
 8003ce0:	200003fc 	.word	0x200003fc

08003ce4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <vTaskInternalSetTimeOutState+0x24>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <vTaskInternalSetTimeOutState+0x28>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	605a      	str	r2, [r3, #4]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	20000400 	.word	0x20000400
 8003d0c:	200003ec 	.word	0x200003ec

08003d10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	613b      	str	r3, [r7, #16]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	e7fe      	b.n	8003d50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d52:	f000 fb5f 	bl	8004414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <xTaskCheckForTimeOut+0xbc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d102      	bne.n	8003d76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	e023      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <xTaskCheckForTimeOut+0xc0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d007      	beq.n	8003d92 <xTaskCheckForTimeOut+0x82>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e015      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d20b      	bcs.n	8003db4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	1ad2      	subs	r2, r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff9b 	bl	8003ce4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e004      	b.n	8003dbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dbe:	f000 fb59 	bl	8004474 <vPortExitCritical>

	return xReturn;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200003ec 	.word	0x200003ec
 8003dd0:	20000400 	.word	0x20000400

08003dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <vTaskMissedYield+0x14>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	bf00      	nop
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	200003fc 	.word	0x200003fc

08003dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003df4:	f000 f852 	bl	8003e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <prvIdleTask+0x28>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d9f9      	bls.n	8003df4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <prvIdleTask+0x2c>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e10:	e7f0      	b.n	8003df4 <prvIdleTask+0x8>
 8003e12:	bf00      	nop
 8003e14:	200002ec 	.word	0x200002ec
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
 8003e26:	e00c      	b.n	8003e42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <prvInitialiseTaskLists+0x60>)
 8003e34:	4413      	add	r3, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fe83 	bl	8002b42 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	607b      	str	r3, [r7, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b06      	cmp	r3, #6
 8003e46:	d9ef      	bls.n	8003e28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e48:	480d      	ldr	r0, [pc, #52]	; (8003e80 <prvInitialiseTaskLists+0x64>)
 8003e4a:	f7fe fe7a 	bl	8002b42 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e4e:	480d      	ldr	r0, [pc, #52]	; (8003e84 <prvInitialiseTaskLists+0x68>)
 8003e50:	f7fe fe77 	bl	8002b42 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e54:	480c      	ldr	r0, [pc, #48]	; (8003e88 <prvInitialiseTaskLists+0x6c>)
 8003e56:	f7fe fe74 	bl	8002b42 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e5a:	480c      	ldr	r0, [pc, #48]	; (8003e8c <prvInitialiseTaskLists+0x70>)
 8003e5c:	f7fe fe71 	bl	8002b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e60:	480b      	ldr	r0, [pc, #44]	; (8003e90 <prvInitialiseTaskLists+0x74>)
 8003e62:	f7fe fe6e 	bl	8002b42 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <prvInitialiseTaskLists+0x78>)
 8003e68:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <prvInitialiseTaskLists+0x64>)
 8003e6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <prvInitialiseTaskLists+0x7c>)
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <prvInitialiseTaskLists+0x68>)
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200002ec 	.word	0x200002ec
 8003e80:	20000378 	.word	0x20000378
 8003e84:	2000038c 	.word	0x2000038c
 8003e88:	200003a8 	.word	0x200003a8
 8003e8c:	200003bc 	.word	0x200003bc
 8003e90:	200003d4 	.word	0x200003d4
 8003e94:	200003a0 	.word	0x200003a0
 8003e98:	200003a4 	.word	0x200003a4

08003e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea2:	e019      	b.n	8003ed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ea4:	f000 fab6 	bl	8004414 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ea8:	4b10      	ldr	r3, [pc, #64]	; (8003eec <prvCheckTasksWaitingTermination+0x50>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fece 	bl	8002c56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ecc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ece:	f000 fad1 	bl	8004474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f810 	bl	8003ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e1      	bne.n	8003ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200003bc 	.word	0x200003bc
 8003ef0:	200003e8 	.word	0x200003e8
 8003ef4:	200003d0 	.word	0x200003d0

08003ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc26 	bl	8004760 <vPortFree>
				vPortFree( pxTCB );
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fc23 	bl	8004760 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f1a:	e018      	b.n	8003f4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d103      	bne.n	8003f2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fc1a 	bl	8004760 <vPortFree>
	}
 8003f2c:	e00f      	b.n	8003f4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d00a      	beq.n	8003f4e <prvDeleteTCB+0x56>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <prvDeleteTCB+0x54>
	}
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <prvResetNextTaskUnblockTime+0x44>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <prvResetNextTaskUnblockTime+0x14>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <prvResetNextTaskUnblockTime+0x16>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <prvResetNextTaskUnblockTime+0x48>)
 8003f74:	f04f 32ff 	mov.w	r2, #4294967295
 8003f78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f7a:	e008      	b.n	8003f8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <prvResetNextTaskUnblockTime+0x44>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <prvResetNextTaskUnblockTime+0x48>)
 8003f8c:	6013      	str	r3, [r2, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	200003a0 	.word	0x200003a0
 8003fa0:	20000408 	.word	0x20000408

08003fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003faa:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <xTaskGetSchedulerState+0x34>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	e008      	b.n	8003fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <xTaskGetSchedulerState+0x38>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	e001      	b.n	8003fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fca:	687b      	ldr	r3, [r7, #4]
	}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	200003f4 	.word	0x200003f4
 8003fdc:	20000410 	.word	0x20000410

08003fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06e      	beq.n	80040d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ff6:	4b3a      	ldr	r3, [pc, #232]	; (80040e0 <xTaskPriorityDisinherit+0x100>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d00a      	beq.n	8004016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
}
 8004030:	bf00      	nop
 8004032:	e7fe      	b.n	8004032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	429a      	cmp	r2, r3
 8004048:	d044      	beq.n	80040d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d140      	bne.n	80040d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7fe fdfd 	bl	8002c56 <uxListRemove>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d115      	bne.n	800408e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	491f      	ldr	r1, [pc, #124]	; (80040e4 <xTaskPriorityDisinherit+0x104>)
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xTaskPriorityDisinherit+0xae>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	2201      	movs	r2, #1
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <xTaskPriorityDisinherit+0x108>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4013      	ands	r3, r2
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <xTaskPriorityDisinherit+0x108>)
 800408c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f1c3 0207 	rsb	r2, r3, #7
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	2201      	movs	r2, #1
 80040a8:	409a      	lsls	r2, r3
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <xTaskPriorityDisinherit+0x108>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <xTaskPriorityDisinherit+0x108>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a08      	ldr	r2, [pc, #32]	; (80040e4 <xTaskPriorityDisinherit+0x104>)
 80040c2:	441a      	add	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe fd66 	bl	8002b9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040d0:	2301      	movs	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040d4:	697b      	ldr	r3, [r7, #20]
	}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	200002e8 	.word	0x200002e8
 80040e4:	200002ec 	.word	0x200002ec
 80040e8:	200003f0 	.word	0x200003f0

080040ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <prvAddCurrentTaskToDelayedList+0xb0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040fc:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fda7 	bl	8002c56 <uxListRemove>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4013      	ands	r3, r2
 8004122:	4a20      	ldr	r2, [pc, #128]	; (80041a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d10a      	bne.n	8004144 <prvAddCurrentTaskToDelayedList+0x58>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	481a      	ldr	r0, [pc, #104]	; (80041a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800413e:	f7fe fd2d 	bl	8002b9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004142:	e026      	b.n	8004192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	d209      	bcs.n	8004170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415c:	4b13      	ldr	r3, [pc, #76]	; (80041ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe fd3b 	bl	8002be4 <vListInsert>
}
 800416e:	e010      	b.n	8004192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe fd31 	bl	8002be4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	d202      	bcs.n	8004192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800418c:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6013      	str	r3, [r2, #0]
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	200003ec 	.word	0x200003ec
 80041a0:	200002e8 	.word	0x200002e8
 80041a4:	200003f0 	.word	0x200003f0
 80041a8:	200003d4 	.word	0x200003d4
 80041ac:	200003a4 	.word	0x200003a4
 80041b0:	200003a0 	.word	0x200003a0
 80041b4:	20000408 	.word	0x20000408

080041b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	3b04      	subs	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b04      	subs	r3, #4
 80041d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f023 0201 	bic.w	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3b04      	subs	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <pxPortInitialiseStack+0x64>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b14      	subs	r3, #20
 80041f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f06f 0202 	mvn.w	r2, #2
 8004206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3b20      	subs	r3, #32
 800420c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	08004221 	.word	0x08004221

08004220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <prvTaskExitError+0x54>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d00a      	beq.n	800424a <prvTaskExitError+0x2a>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <prvTaskExitError+0x28>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60bb      	str	r3, [r7, #8]
}
 800425c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800425e:	bf00      	nop
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0fc      	beq.n	8004260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004266:	bf00      	nop
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	2000000c 	.word	0x2000000c
	...

08004280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <pxCurrentTCBConst2>)
 8004282:	6819      	ldr	r1, [r3, #0]
 8004284:	6808      	ldr	r0, [r1, #0]
 8004286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428a:	f380 8809 	msr	PSP, r0
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8811 	msr	BASEPRI, r0
 800429a:	4770      	bx	lr
 800429c:	f3af 8000 	nop.w

080042a0 <pxCurrentTCBConst2>:
 80042a0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop

080042a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042a8:	4808      	ldr	r0, [pc, #32]	; (80042cc <prvPortStartFirstTask+0x24>)
 80042aa:	6800      	ldr	r0, [r0, #0]
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f380 8808 	msr	MSP, r0
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f380 8814 	msr	CONTROL, r0
 80042ba:	b662      	cpsie	i
 80042bc:	b661      	cpsie	f
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	df00      	svc	0
 80042c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80042ca:	bf00      	nop
 80042cc:	e000ed08 	.word	0xe000ed08

080042d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <xPortStartScheduler+0x120>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a46      	ldr	r2, [pc, #280]	; (80043f4 <xPortStartScheduler+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10a      	bne.n	80042f6 <xPortStartScheduler+0x26>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	613b      	str	r3, [r7, #16]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <xPortStartScheduler+0x120>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <xPortStartScheduler+0x128>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10a      	bne.n	8004316 <xPortStartScheduler+0x46>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <xPortStartScheduler+0x12c>)
 8004318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b31      	ldr	r3, [pc, #196]	; (8004400 <xPortStartScheduler+0x130>)
 800433c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <xPortStartScheduler+0x134>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004344:	e009      	b.n	800435a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <xPortStartScheduler+0x134>)
 800434e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d0ef      	beq.n	8004346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004366:	4b27      	ldr	r3, [pc, #156]	; (8004404 <xPortStartScheduler+0x134>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1c3 0307 	rsb	r3, r3, #7
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00a      	beq.n	8004388 <xPortStartScheduler+0xb8>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60bb      	str	r3, [r7, #8]
}
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <xPortStartScheduler+0x134>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <xPortStartScheduler+0x134>)
 8004390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <xPortStartScheduler+0x134>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <xPortStartScheduler+0x134>)
 800439c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <xPortStartScheduler+0x138>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <xPortStartScheduler+0x138>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <xPortStartScheduler+0x138>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <xPortStartScheduler+0x138>)
 80043b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043be:	f000 f8dd 	bl	800457c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <xPortStartScheduler+0x13c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80043c8:	f000 f8fc 	bl	80045c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <xPortStartScheduler+0x140>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <xPortStartScheduler+0x140>)
 80043d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80043d8:	f7ff ff66 	bl	80042a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80043dc:	f7ff fba0 	bl	8003b20 <vTaskSwitchContext>
	prvTaskExitError();
 80043e0:	f7ff ff1e 	bl	8004220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00
 80043f4:	410fc271 	.word	0x410fc271
 80043f8:	410fc270 	.word	0x410fc270
 80043fc:	e000e400 	.word	0xe000e400
 8004400:	20000414 	.word	0x20000414
 8004404:	20000418 	.word	0x20000418
 8004408:	e000ed20 	.word	0xe000ed20
 800440c:	2000000c 	.word	0x2000000c
 8004410:	e000ef34 	.word	0xe000ef34

08004414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
}
 800442c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <vPortEnterCritical+0x58>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <vPortEnterCritical+0x58>)
 8004436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <vPortEnterCritical+0x58>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10f      	bne.n	8004460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortEnterCritical+0x5c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <vPortEnterCritical+0x4c>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	603b      	str	r3, [r7, #0]
}
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vPortEnterCritical+0x4a>
	}
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	2000000c 	.word	0x2000000c
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <vPortExitCritical+0x50>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <vPortExitCritical+0x24>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <vPortExitCritical+0x50>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <vPortExitCritical+0x50>)
 80044a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <vPortExitCritical+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <vPortExitCritical+0x42>
 80044aa:	2300      	movs	r3, #0
 80044ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	2000000c 	.word	0x2000000c
	...

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f01e 0f10 	tst.w	lr, #16
 80044e0:	bf08      	it	eq
 80044e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	6010      	str	r0, [r2, #0]
 80044ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044f4:	f380 8811 	msr	BASEPRI, r0
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f7ff fb0e 	bl	8003b20 <vTaskSwitchContext>
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f380 8811 	msr	BASEPRI, r0
 800450c:	bc09      	pop	{r0, r3}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	f01e 0f10 	tst.w	lr, #16
 800451a:	bf08      	it	eq
 800451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004520:	f380 8809 	msr	PSP, r0
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst>:
 8004530:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004552:	f7ff fa27 	bl	80039a4 <xTaskIncrementTick>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <xPortSysTickHandler+0x40>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f383 8811 	msr	BASEPRI, r3
}
 800456e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <vPortSetupTimerInterrupt+0x34>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <vPortSetupTimerInterrupt+0x38>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <vPortSetupTimerInterrupt+0x3c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <vPortSetupTimerInterrupt+0x40>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <vPortSetupTimerInterrupt+0x44>)
 800459a:	3b01      	subs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <vPortSetupTimerInterrupt+0x34>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010
 80045b4:	e000e018 	.word	0xe000e018
 80045b8:	20000000 	.word	0x20000000
 80045bc:	10624dd3 	.word	0x10624dd3
 80045c0:	e000e014 	.word	0xe000e014

080045c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80045c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045d4 <vPortEnableVFP+0x10>
 80045c8:	6801      	ldr	r1, [r0, #0]
 80045ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045ce:	6001      	str	r1, [r0, #0]
 80045d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80045d2:	bf00      	nop
 80045d4:	e000ed88 	.word	0xe000ed88

080045d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80045e4:	f7ff f934 	bl	8003850 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80045e8:	4b58      	ldr	r3, [pc, #352]	; (800474c <pvPortMalloc+0x174>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045f0:	f000 f910 	bl	8004814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045f4:	4b56      	ldr	r3, [pc, #344]	; (8004750 <pvPortMalloc+0x178>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 808e 	bne.w	800471e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01d      	beq.n	8004644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004608:	2208      	movs	r2, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f023 0307 	bic.w	r3, r3, #7
 8004620:	3308      	adds	r3, #8
 8004622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <pvPortMalloc+0x6c>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	617b      	str	r3, [r7, #20]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d069      	beq.n	800471e <pvPortMalloc+0x146>
 800464a:	4b42      	ldr	r3, [pc, #264]	; (8004754 <pvPortMalloc+0x17c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d864      	bhi.n	800471e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004654:	4b40      	ldr	r3, [pc, #256]	; (8004758 <pvPortMalloc+0x180>)
 8004656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004658:	4b3f      	ldr	r3, [pc, #252]	; (8004758 <pvPortMalloc+0x180>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800465e:	e004      	b.n	800466a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <pvPortMalloc+0xa4>
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f1      	bne.n	8004660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800467c:	4b33      	ldr	r3, [pc, #204]	; (800474c <pvPortMalloc+0x174>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004682:	429a      	cmp	r2, r3
 8004684:	d04b      	beq.n	800471e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2208      	movs	r2, #8
 800468c:	4413      	add	r3, r2
 800468e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	2308      	movs	r3, #8
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d91f      	bls.n	80046e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <pvPortMalloc+0xf8>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	613b      	str	r3, [r7, #16]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	1ad2      	subs	r2, r2, r3
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046e2:	69b8      	ldr	r0, [r7, #24]
 80046e4:	f000 f8f8 	bl	80048d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <pvPortMalloc+0x17c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <pvPortMalloc+0x17c>)
 80046f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046f6:	4b17      	ldr	r3, [pc, #92]	; (8004754 <pvPortMalloc+0x17c>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <pvPortMalloc+0x184>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <pvPortMalloc+0x17c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <pvPortMalloc+0x184>)
 8004708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <pvPortMalloc+0x178>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	431a      	orrs	r2, r3
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800471e:	f7ff f8a5 	bl	800386c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <pvPortMalloc+0x16a>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <pvPortMalloc+0x168>
	return pvReturn;
 8004742:	69fb      	ldr	r3, [r7, #28]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	; 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20001024 	.word	0x20001024
 8004750:	20001030 	.word	0x20001030
 8004754:	20001028 	.word	0x20001028
 8004758:	2000101c 	.word	0x2000101c
 800475c:	2000102c 	.word	0x2000102c

08004760 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d048      	beq.n	8004804 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004772:	2308      	movs	r3, #8
 8004774:	425b      	negs	r3, r3
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4413      	add	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	4b21      	ldr	r3, [pc, #132]	; (800480c <vPortFree+0xac>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <vPortFree+0x44>
	__asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	60fb      	str	r3, [r7, #12]
}
 80047a0:	bf00      	nop
 80047a2:	e7fe      	b.n	80047a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <vPortFree+0x62>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60bb      	str	r3, [r7, #8]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <vPortFree+0xac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4013      	ands	r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d019      	beq.n	8004804 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d115      	bne.n	8004804 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <vPortFree+0xac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	401a      	ands	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047e8:	f7ff f832 	bl	8003850 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	4b07      	ldr	r3, [pc, #28]	; (8004810 <vPortFree+0xb0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a06      	ldr	r2, [pc, #24]	; (8004810 <vPortFree+0xb0>)
 80047f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047fa:	6938      	ldr	r0, [r7, #16]
 80047fc:	f000 f86c 	bl	80048d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004800:	f7ff f834 	bl	800386c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20001030 	.word	0x20001030
 8004810:	20001028 	.word	0x20001028

08004814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800481a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800481e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <prvHeapInit+0xac>)
 8004822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3307      	adds	r3, #7
 8004832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	4a1f      	ldr	r2, [pc, #124]	; (80048c0 <prvHeapInit+0xac>)
 8004844:	4413      	add	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <prvHeapInit+0xb0>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004852:	4b1c      	ldr	r3, [pc, #112]	; (80048c4 <prvHeapInit+0xb0>)
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	4413      	add	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004860:	2208      	movs	r2, #8
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0307 	bic.w	r3, r3, #7
 800486e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <prvHeapInit+0xb4>)
 8004874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <prvHeapInit+0xb4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <prvHeapInit+0xb4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <prvHeapInit+0xb4>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <prvHeapInit+0xb8>)
 80048a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <prvHeapInit+0xbc>)
 80048aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <prvHeapInit+0xc0>)
 80048ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	bf00      	nop
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	2000041c 	.word	0x2000041c
 80048c4:	2000101c 	.word	0x2000101c
 80048c8:	20001024 	.word	0x20001024
 80048cc:	2000102c 	.word	0x2000102c
 80048d0:	20001028 	.word	0x20001028
 80048d4:	20001030 	.word	0x20001030

080048d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048e0:	4b28      	ldr	r3, [pc, #160]	; (8004984 <prvInsertBlockIntoFreeList+0xac>)
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e002      	b.n	80048ec <prvInsertBlockIntoFreeList+0x14>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d8f7      	bhi.n	80048e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d108      	bne.n	800491a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	441a      	add	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d118      	bne.n	8004960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <prvInsertBlockIntoFreeList+0xb0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d00d      	beq.n	8004956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	e008      	b.n	8004968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <prvInsertBlockIntoFreeList+0xb0>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e003      	b.n	8004968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d002      	beq.n	8004976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000101c 	.word	0x2000101c
 8004988:	20001024 	.word	0x20001024

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 f82e 	bl	8004a00 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004b18 	.word	0x08004b18
 80049c8:	08004b18 	.word	0x08004b18
 80049cc:	08004b18 	.word	0x08004b18
 80049d0:	08004b1c 	.word	0x08004b1c

080049d4 <memcpy>:
 80049d4:	440a      	add	r2, r1
 80049d6:	4291      	cmp	r1, r2
 80049d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049dc:	d100      	bne.n	80049e0 <memcpy+0xc>
 80049de:	4770      	bx	lr
 80049e0:	b510      	push	{r4, lr}
 80049e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ea:	4291      	cmp	r1, r2
 80049ec:	d1f9      	bne.n	80049e2 <memcpy+0xe>
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <memset>:
 80049f0:	4402      	add	r2, r0
 80049f2:	4603      	mov	r3, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
